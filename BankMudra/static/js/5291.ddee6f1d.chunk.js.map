{"version":3,"file":"static/js/5291.ddee6f1d.chunk.js","mappings":"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","sources":["pages/bbpsServices/index.jsx","utils/genrateUrl.js","utils/getLocation.js","utils/toastMessage.js","utils/withLocation.js"],"sourcesContent":["import React, { useEffect, useState , useRef } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {\r\n  Autocomplete,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  Alert,\r\n  Divider,\r\n  Dialog, DialogTitle, DialogContent, DialogActions,Tabs, Tab, \r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Paper,\r\n  InputAdornment,\r\n\r\n} from '@mui/material';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport { getBBPSBill, getBBPSOperator, getMobileRechargeCircle, getMobileRechargePlan, payBBPSBill } from '../../api/login/Login';\r\nimport Loader from '../../common/loader/Loader';\r\nimport withLocation from '../../utils/withLocation';\r\nimport toastMessage from '../../utils/toastMessage';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { genrateUrl } from '../../utils/genrateUrl';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport IconButton from '@mui/material/IconButton';\r\nconst CustomTextField = (props) => (\r\n  <TextField\r\n    variant=\"outlined\"\r\n    size=\"small\"\r\n    fullWidth\r\n    sx={{\r\n      \"& .MuiOutlinedInput-root\": {\r\n        height: 42,\r\n        \"& .MuiOutlinedInput-input\": {\r\n          py: 1,\r\n        },\r\n        \"&:hover fieldset\": { borderColor: \"var(--bs-primary1)\" },\r\n        \"&.Mui-focused fieldset\": { borderColor: \"var(--bs-primary1)\" },\r\n      },\r\n      \"& label.Mui-focused\": {\r\n        color: 'var(--bs-nav)',\r\n      },\r\n    }}\r\n    {...props}\r\n  />\r\n);\r\n\r\nconst CustomBox =  ({children})=> (\r\n    <Box\r\n    sx={{\r\n      width: '100%',\r\n    //   maxWidth: 800,\r\n      mx: 'auto',\r\n    //   mt: 5,\r\n    my:1,\r\n      px: 3,\r\n      py:4,\r\n      pb:6,\r\n    //   bgcolor: '#F8F9FA',\r\n    bgcolor:'white',\r\n      borderRadius: 1,\r\n      boxShadow: 0,\r\n    }}\r\n  >\r\n    {children}\r\n    </Box>\r\n)\r\n\r\nconst BBPSServices = ({walletCall}) => {\r\n  const navigate =  useNavigate()\r\n  const { serviceId } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [operatorList, setOperatorList] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [selectedOperator, setSelectedOperator] = useState(null);\r\n  const [formValues, setFormValues] = useState({});\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [billDetails, setBillDetails] = useState(null);\r\n  const [billAmount, setBillAmount] = useState('');\r\n  const [billFetched, setBillFetched] = useState(false);\r\n  const [pin , setPin] = useState()\r\n  const [refId , setRefId] = useState('')\r\n  const [openTipModel , setOpenTipModel] = useState(false)\r\n  const [serviceName , setServicename] = useState('')\r\n  const isFetchingRef = useRef(false);\r\n\r\n  // Mobile Recharge Special State \r\n  const [isMobileRecharge , setIsMobileRecharge] = useState(false)\r\n  const [isDth , setIsDth] = useState(false)\r\n  const [fetchRequired , setFetchRequried] = useState(false)\r\n  const [circle , setCircle] = useState([])\r\n  const [selectedCircle , setSelectedCircle] = useState(null)\r\n  const [planDetails , setplanDetails] = useState(null)\r\n  const [planPopupOpen , setPlanPopupOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!serviceId) {\r\n      setError('Invalid service ID');\r\n      return;\r\n    }\r\n\r\n    const fetchOperators = async () => {\r\n      setLoading(true);\r\n      setIsMobileRecharge(false)\r\n      setIsDth(false)\r\n      try {\r\n        const res = await getBBPSOperator(serviceId);\r\n        if (res?.data?.error) {\r\n          setError('Failed to fetch operator data');\r\n        } else {\r\n          setOperatorList(res?.data?.data?.Operator || []);\r\n          setSelectedOperator(null)\r\n          setSelectedCircle(null)\r\n          setServicename(res?.data?.data?.service)\r\n            if(res?.data?.data?.service?.service_name ==='Mobile Recharge')\r\n            {\r\n              setIsMobileRecharge(true)\r\n            } \r\n            if (res?.data?.data?.service?.service_name ==='DTH')\r\n            {\r\n              setIsDth(true)\r\n            }\r\n           \r\n            \r\n            \r\n          // Mobile Recharge\r\n         \r\n        }\r\n      } catch {\r\n        setError('Something went wrong while fetching operators');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchOperators();\r\n    handleReset()\r\n  }, [serviceId]);\r\n\r\n  // const handleInputChange = (paramName, value) => {\r\n  //   setFormValues((prev) => ({ ...prev, [paramName]: value }));\r\n  //   const param = selectedOperator?.customerParams?.find(p => p.name === paramName);\r\n  //   if (param?.regex && !new RegExp(param.regex).test(value)) {\r\n  //     setFormErrors((prev) => ({ ...prev, [paramName]: 'Invalid input' }));\r\n  //   } else {\r\n  //     setFormErrors((prev) => ({ ...prev, [paramName]: '' }));\r\n  //   }\r\n  // };\r\n\r\n  const handleInputChange = (paramName, value) => {\r\n    const param = selectedOperator?.customerParams?.find(p => p.name === paramName);\r\n  \r\n    // Skip validation and just set value if param is Amount\r\n    if (param?.desc === \"Amount\") {\r\n      setFormValues((prev) => ({ ...prev, [paramName]: value }));\r\n      return;\r\n    }\r\n  \r\n    // Otherwise, normal flow\r\n    setFormValues((prev) => ({ ...prev, [paramName]: value }));\r\n  \r\n    if (param?.regex && !new RegExp(param.regex).test(value)) {\r\n      setFormErrors((prev) => ({ ...prev, [paramName]: 'Invalid input' }));\r\n    } else {\r\n      setFormErrors((prev) => ({ ...prev, [paramName]: '' }));\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(()=>{\r\n          if(isMobileRecharge)\r\n          {\r\n            fetchCircle()\r\n          }\r\n  },[isMobileRecharge])\r\n\r\n\r\n  const fetchCircle = async()=> {\r\n      try {\r\n        let res = await getMobileRechargeCircle()\r\n         setCircle(res?.data?.data || [])\r\n      } catch (error) {\r\n        setCircle([])\r\n      }\r\n  }\r\n\r\n  const handleFetchMobilePlan = withLocation(async(latitude , longitude) => {\r\n    if (isFetchingRef.current) return;\r\n    setLoading(true);\r\n    setError('');\r\n    setplanDetails(null)\r\n    setBillFetched(false)\r\n    isFetchingRef.current = true; \r\n      try {\r\n        const body = {\r\n            opretorId: selectedOperator?.operatorid,\r\n            state:selectedCircle?.circle || 'ALL INDIA' ,\r\n            latitude,\r\n            longitude,\r\n          };\r\n\r\n          try {\r\n            let res = await getMobileRechargePlan(body)\r\n             if(res?.data?.statusCode ===200)\r\n             {\r\n              setplanDetails(res?.data?.data)\r\n              setBillFetched(false);\r\n              setPlanPopupOpen(true)\r\n             }\r\n             toastMessage(res?.data?.error , res?.data?.message)\r\n            \r\n          } catch (error) {\r\n            toastMessage(error?.data?.data?.error , error?.data?.data?.message)\r\n          }\r\n\r\n       \r\n      } catch (error) {\r\n        \r\n      }\r\n      finally{\r\n        setLoading(false)\r\n        isFetchingRef.current = false;\r\n      }\r\n  })\r\n\r\n  const handleFetchBill = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    setRefId('')\r\n    setBillDetails(null);\r\n    setBillFetched(false)\r\n   \r\n\r\n    try {\r\n      const body = {\r\n        billerId: selectedOperator?.operatorid,\r\n        inputParameters: formValues\r\n      };\r\n      if(!fetchRequired)\r\n        {\r\n          body.transactionAmount = billAmount\r\n        }\r\n\r\n      const res = await getBBPSBill(body);\r\n      const bill = res?.data?.data?.billerResponse;\r\n\r\n      if (!bill) {\r\n        toastMessage(res.data?.error ,res?.data?.message);\r\n      } else {\r\n        setBillDetails(bill);\r\n        setBillAmount(bill?.BillAmount || '');\r\n        setBillFetched(true);\r\n        setRefId(res?.data?.data?.refId)\r\n      }\r\n    } catch {\r\n      setError('Failed to fetch bill. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const handleFetchBillBackground = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    setRefId('')\r\n    setBillDetails(null);\r\n    setBillFetched(false)\r\n   \r\n\r\n    try {\r\n      let cloneObj = {...formValues}\r\n\r\n      if(selectedOperator?.operatorid === 'SUND00000NAT02')\r\n      {\r\n        cloneObj.param2 = billAmount\r\n      }\r\n\r\n      const body = {\r\n        billerId: selectedOperator?.operatorid,\r\n        inputParameters: cloneObj\r\n      };\r\n      if(!fetchRequired)\r\n        {\r\n          body.transactionAmount = billAmount\r\n        }\r\n\r\n      const res = await getBBPSBill(body);\r\n      const bill = res?.data?.data?.billerResponse;\r\n\r\n      if (res?.data?.error === true) {\r\n        toastMessage(res.data?.error ,res?.data?.message);\r\n      } else {\r\n        setBillDetails(bill);\r\n        // setBillAmount(bill?.BillAmount || '');\r\n        setOpenTipModel(true)\r\n        setBillFetched(false)\r\n        setRefId(res?.data?.data?.refId)\r\n      }\r\n    } catch {\r\n      setError('Failed to fetch bill. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  //Subimit after in tpin confirm button\r\n  const handlePayBill = withLocation(async (latitude, longitude) => {\r\n    // console.log('Paying bill of ₹', billAmount);\r\n    setLoading(true)\r\n    const billPaymentData = {\r\n        billerId: selectedOperator?.operatorid,\r\n        telecomCircle: \"\",\r\n        inputParameters: formValues,\r\n        latitude: String(latitude).slice(0,7),\r\n        longitude:String(longitude).slice(0,7),\r\n        \r\n        amount: billAmount,\r\n        enquiryReferenceId: refId,\r\n        tpin: pin\r\n      };\r\n        if(isMobileRecharge)\r\n        {\r\n          billPaymentData.telecomCircle = selectedCircle?.circleCode\r\n        }\r\n\r\n        try {\r\n          let res = await payBBPSBill(billPaymentData)\r\n          if(res?.data?.error === false)\r\n          {\r\n            handleReset()\r\n            walletCall()\r\n            tipPopClose();\r\n            navigate(`/bill-invoice/${res?.data?.data?.id}`)\r\n          }\r\n          setPin('')\r\n          toastMessage(res?.data?.error , res?.data?.message) \r\n        } catch (error) {\r\n          \r\n        } finally{\r\n          setLoading(false)\r\n        }\r\n  \r\n  })\r\n\r\n  const handleReset = () => {\r\n    setFormValues({});\r\n    setFormErrors({});\r\n    setBillDetails(null);\r\n    setBillAmount('');\r\n    setBillFetched(false);\r\n    setError('');\r\n    setplanDetails(null)\r\n//    setSelectedCircle(null)\r\n  };\r\n\r\n  // const isFormValid = () => {\r\n  //   return selectedOperator?.customerParams?.every(param => {\r\n  //     const value = formValues[param.name] || '';\r\n  //     const isValid = !param.regex || new RegExp(param.regex).test(value);\r\n  //     return isValid && value.length >= param.minLength;\r\n  //   });\r\n  // };\r\n  \r\n  const isFormValid = () => {\r\n    return selectedOperator?.customerParams?.every(param => {\r\n      if (param.desc === \"Amount\") return true; // Skip validation for hidden field\r\n  \r\n      const value = formValues[param.name] || '';\r\n      const isValid = !param.regex || new RegExp(param.regex).test(value);\r\n      return isValid && value.length >= param.minLength;\r\n    });\r\n  };\r\n  const tipPopClose = ()=> {\r\n    setOpenTipModel(false)\r\n    setPin('')\r\n  }\r\n\r\n\r\n  const tab1 = planDetails?.plans ? Object.keys(planDetails?.plans) : [];\r\n  const tab2 = planDetails?.offerPlan ? Object.keys(planDetails?.offerPlan) : [];\r\n  const tabs = [...tab1, ...tab2];\r\n  const Data1 = planDetails?.plans || {};\r\n  const Data2 = planDetails?.offerPlan || {};\r\n  const total = { ...Data1, ...Data2 };\r\n\r\n   const [activeTab, setActiveTab] = useState(0);\r\n\r\n    const handleTabChange = (_, data) => {\r\n    \r\n        setActiveTab(data);\r\n      };\r\n    const payMobileRecharge = (value)=>{\r\n      setBillAmount(value)\r\n      setPlanPopupOpen(false)\r\n      // setOpenTipModel(true)\r\n     \r\n    }  \r\n    // Dth and mobile pay handle \r\n\r\n    const handlePay = async()=> {\r\n            if( (!fetchRequired ||  isDth) )\r\n            {\r\n               await handleFetchBillBackground()\r\n            }else{\r\n              setOpenTipModel(true)\r\n            }\r\n            \r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n  <Box\r\n sx={{\r\n  background: `linear-gradient(120deg, #fffaf5 0%, #e8efff 100%)`,\r\n  backgroundSize: 'cover',\r\n  minHeight: '100vh',\r\n  padding: 2,\r\n}}\r\n>\r\n    <Box p={0.5} maxWidth={'620px'}  m={'auto'} position=\"relative\" zIndex={1}>\r\n      {loading && <Loader />}\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n\r\n      <CustomBox>\r\n    \r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n \r\n  <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n    {serviceName?.icon && (\r\n      \r\n      <img\r\n        src={genrateUrl(serviceName?.icon)}\r\n        alt=\"Service Icon\"\r\n        width={30}\r\n        height={30}\r\n        style={{ objectFit: 'contain' }}\r\n        onError={(e) => {\r\n          e.currentTarget.src = '/bbpslogo.png';\r\n        }}\r\n      />\r\n    )}\r\n    <Typography variant=\"h6\" gutterBottom mt={1} fontSize={18}>\r\n      {serviceName?.service_name}\r\n    </Typography>\r\n  </Box>\r\n\r\n  {/* Right Side: BBPS Logo */}\r\n  <Box>\r\n    <img src=\"/bbpslogo.png\" alt=\"BBPS Logo\" width={90} />\r\n  </Box>\r\n</Box>\r\n\r\n          <Divider sx={{ mb: 2 }} />\r\n\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Autocomplete\r\n              options={operatorList}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedOperator}\r\n              disabled={billFetched}\r\n              onChange={(e, newVal) => {\r\n                setSelectedOperator(newVal);\r\n                let requiredFetch = newVal?.fetchRequirement === 'MANDATORY'\r\n                setFetchRequried(requiredFetch)\r\n                handleReset();\r\n              }}\r\n              fullWidth\r\n              renderOption={(props, option) => (\r\n                <li {...props} key={option._id}>\r\n                  <Box\r\n                    component=\"div\"\r\n                    sx={{ \r\n                      fontSize: '13px',   // Change font size here\r\n                      color: 'var(--bs-nav)'       // Change text color here\r\n                    }}\r\n                    display={'flex'}\r\n                    \r\n                    columnGap={1.5}\r\n                    alignItems={'center'}\r\n                  >\r\n                      <img\r\n        src={option?.logo_url}\r\n        alt=\"Service Icon\"\r\n        width={20}\r\n        height={20}\r\n        style={{ objectFit: 'contain' }}\r\n        onError={(e) => {\r\n          e.currentTarget.src = '/bbpslogo.png';\r\n        }}\r\n      />\r\n                    {option.name}\r\n                  </Box>\r\n                </li>\r\n              )}\r\n              renderInput={(params) => (\r\n                <CustomTextField\r\n                  {...params}\r\n                  label=\"Select Operator\"\r\n                  fullWidth\r\n                  InputLabelProps={{\r\n                    sx: {\r\n                      '&.MuiInputLabel-root:not(.MuiInputLabel-shrink)': {\r\n                        top: '-6px',\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n\r\n          {/* //Mobile opertor on isMobileRecharge true  */}\r\n             {(selectedOperator && isMobileRecharge) && \r\n          <Grid item xs={12} sm={6}>\r\n             <Autocomplete\r\n              options={circle}\r\n              getOptionLabel={(option) => option.circle}\r\n              value={selectedCircle}\r\n              onChange={(e, newVal) => {\r\n                setSelectedCircle(newVal);\r\n                // handleReset();\r\n              }}\r\n              disabled={billFetched}\r\n              fullWidth\r\n              renderOption={(props, option) => (\r\n                <li {...props}>\r\n                  <Box\r\n                    component=\"span\"\r\n                    sx={{ \r\n                      fontSize: '13px',   // Change font size here\r\n                      color: 'var(--bs-nav)'       // Change text color here\r\n                    }}\r\n                  >\r\n                    {option.circle}\r\n                  </Box>\r\n                </li>\r\n              )}\r\n              renderInput={(params) => (\r\n                <CustomTextField\r\n                  {...params}\r\n                  label=\"Select Circle\"\r\n                  fullWidth\r\n                  InputLabelProps={{\r\n                    sx: {\r\n                      '&.MuiInputLabel-root:not(.MuiInputLabel-shrink)': {\r\n                        top: '-6px',\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n          }\r\n\r\n          {/* {selectedOperator?.customerParams?.map((param) => (\r\n            <Grid item xs={12} sm={6} key={param.name}>\r\n              <CustomTextField\r\n                label={param.desc}\r\n                \r\n                type=\"text\"\r\n                value={formValues[param.name] || ''}\r\n                inputProps={{\r\n                  maxLength: param.maxLength,\r\n                  minLength: param.minLength,\r\n                  inputMode: param.inputType === \"NUMERIC\" ? \"numeric\" : \"text\",\r\n                \r\n                }}\r\n                onChange={(e) => handleInputChange(param.name, e.target.value)}\r\n                error={!!formErrors[param.name]}\r\n                helperText={formErrors[param.name]}\r\n                disabled={billFetched}\r\n              />\r\n            </Grid>\r\n          ))} */}\r\n          {selectedOperator?.customerParams?.map((param) => (\r\n  <Grid\r\n    item\r\n    xs={12}\r\n    sm={6}\r\n    key={param.name}\r\n    sx={{ display: param.desc === \"Amount\" ? \"none\" : \"block\" }}\r\n  >\r\n    <CustomTextField\r\n      label={param.desc}\r\n      type={param.desc === \"Amount\" ? \"hidden\" : \"text\"}\r\n      value={formValues[param.name] || ''}\r\n      inputProps={{\r\n        maxLength: param.maxLength,\r\n        minLength: param.minLength,\r\n        inputMode: param.inputType === \"NUMERIC\" ? \"numeric\" : \"text\",\r\n      }}\r\n      onChange={(e) => handleInputChange(param.name, e.target.value)}\r\n      error={!!formErrors[param.name]}\r\n      helperText={formErrors[param.name]}\r\n      disabled={billFetched}\r\n    />\r\n  </Grid>\r\n))}\r\n\r\n\r\n{ (selectedOperator && !fetchRequired ) &&\r\n\r\n<>\r\n\r\n<Grid item xs={12} sm={12} >\r\n  <Box sx={{position:'relative'}}>\r\n\r\n \r\n<CustomTextField\r\n                label=\"Amount to Pay (₹)\"\r\n                value={billAmount}\r\n                type=\"number\"\r\n                disabled={isMobileRecharge}\r\n                onChange={(e) => setBillAmount(e.target.value)}\r\n              />\r\n             {((!fetchRequired && isDth) || isMobileRecharge)&&\r\n              <Box sx={{position:\"absolute\" , right:'10px' , top:'10px' , cursor:'pointer'}} onClick ={handleFetchMobilePlan}>\r\n                  <p style={{fontSize:'12px' , cursor:'pointer'}}  >View Plans</p>\r\n              </Box> }\r\n          </Box>     \r\n            </Grid> \r\n           <Grid container item sx={12} justifyContent={'center'}>\r\n           <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={!selectedOperator || billAmount < 9 || !isFormValid()}\r\n                onClick={handlePay}\r\n                sx={{\r\n                       width:'250px',\r\n                    borderColor: 'var(--bs-primary1)', // Custom colors\r\n                    \r\n                    backgroundColor: 'var(--bs-primary1)', // Custom colors\r\n                    color: \"white\",\r\n                  }}\r\n              >\r\n               Process to Pay {billAmount}\r\n              </Button>\r\n            </Grid> </> } \r\n\r\n\r\n            {(selectedOperator && fetchRequired) &&\r\n             <Grid container item sx={12} justifyContent={'center'}>\r\n             <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={!selectedOperator || !isFormValid() || billFetched}\r\n                onClick={handleFetchBill}\r\n                sx={{\r\n                       width:'250px',\r\n                    borderColor: 'var(--bs-primary1)', // Custom colors\r\n                    \r\n                    backgroundColor: 'var(--bs-primary1)', // Custom colors\r\n                    color: \"white\",\r\n                  }}\r\n              >\r\n                Fetch Bill\r\n              </Button>\r\n              </Grid>\r\n              }\r\n        \r\n\r\n          {/* {selectedOperator && !billFetched && (\r\n            <Box display={'flex'} gap={2} mt={2}  sx={{\r\n              flexDirection: {\r\n                sm: 'column',\r\n                md: 'row',\r\n              },\r\n              justifyContent:'center',\r\n              width:\"100%\"\r\n            }}\r\n             >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isMobileRecharge ? !isFormValid() || !selectedCircle : !isFormValid()}\r\n\r\n                onClick={(isMobileRecharge || (isDth && fetchRequired) ) ? handleFetchMobilePlan :  handleFetchBill}\r\n\r\n                sx={{\r\n                       width:'250px',\r\n                    borderColor: 'var(--bs-primary1)', // Custom colors\r\n                    \r\n                    backgroundColor: 'var(--bs-primary1)', // Custom colors\r\n                    color: \"white\",\r\n        \r\n                  }}\r\n              >\r\n                {(isMobileRecharge || (isDth && fetchRequired) )  ? 'Fetch Plan' :\"Fetch Bill\" }\r\n              </Button>\r\n\r\n              {(!fetchRequired) &&\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={ !isFormValid() || billAmount < 10}\r\n                onClick={()=>payMobileRecharge(billAmount)}\r\n\r\n                sx={{\r\n                       width:'250px',\r\n                    borderColor: 'var(--bs-primary1)', // Custom colors\r\n                    marginLeft:2,\r\n                    backgroundColor: 'var(--bs-primary1)', // Custom colors\r\n                    color: \"white\",\r\n        \r\n                  }}\r\n              >\r\n                {'Pay Bill' }\r\n              </Button> }\r\n            </Box>\r\n          )}\r\n\r\n          {\r\n            selectedOperator && billFetched && (\r\n                <Box  display={'flex'} gap={2} mt={2}  sx={{\r\n                  flexDirection: {\r\n                    sm: 'column',\r\n                    md: 'row',\r\n                  },\r\n                  justifyContent:'center',\r\n                  width:\"100%\"\r\n                }}>\r\n                <Button\r\n                variant='outlined'\r\n                color=\"error\"\r\n                onClick={handleReset}\r\n                sx={{\r\n                    width:'250px'\r\n                }}\r\n              >\r\n                Reset\r\n              </Button>\r\n              {( (!fetchRequired && !billFetched)   ) &&\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={ !isFormValid() || billAmount < 10}\r\n                onClick={()=>payMobileRecharge(billAmount)}\r\n\r\n                sx={{\r\n                       width:'250px',\r\n                    borderColor: 'var(--bs-primary1)', // Custom colors\r\n                  \r\n                    backgroundColor: 'var(--bs-primary1)', // Custom colors\r\n                    color: \"white\",\r\n        \r\n                  }}\r\n              >\r\n                {'Pay Bill' }\r\n              </Button> }\r\n              </Box>\r\n            )\r\n          } */}\r\n        </Grid>\r\n      </CustomBox>\r\n\r\n      {billFetched && billDetails && (\r\n        <CustomBox>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Bill Details\r\n          </Typography>\r\n          <Divider sx={{ mb: 2 }} />\r\n\r\n          <Grid container spacing={2}>\r\n            {[\r\n  ...(Array.isArray(billDetails?.CustomerParamsDetails) ? billDetails.CustomerParamsDetails : []),\r\n  ...(Array.isArray(billDetails?.AdditionalDetails) ? billDetails.AdditionalDetails : [])\r\n]?.map((item, idx) => (\r\n              <Grid item xs={12} sm={6} key={idx}>\r\n                <Box\r\n                  display=\"flex\"\r\n                  justifyContent=\"space-between\"\r\n                  border=\"1px solid #eee\"\r\n                  borderRadius={1}\r\n                  p={1}\r\n                  boxShadow={1}\r\n                >\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">{item.Name}</Typography>\r\n                  <Typography variant=\"body2\" fontWeight={500}>{item.Value}</Typography>\r\n                </Box>\r\n              </Grid>\r\n            ))}\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <Box\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                border=\"1px solid #eee\"\r\n                borderRadius={1}\r\n                p={1}\r\n                boxShadow={1}\r\n              >\r\n                <Typography variant=\"body2\" color=\"text.secondary\">Customer Name</Typography>\r\n                <Typography variant=\"body2\" fontWeight={500}>{billDetails.CustomerName}</Typography>\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <CustomTextField\r\n                label=\"Amount to Pay (₹)\"\r\n                value={billAmount}\r\n                type=\"number\"\r\n                onChange={(e) => setBillAmount(e.target.value)}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid container item xs={12} justifyContent=\"center\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"success\"\r\n                disabled={!billAmount}\r\n                // onClick={handlePayBill}\r\n                onClick={() => setOpenTipModel(true)}\r\n                // fullWidth\r\n              \r\n                sx={{\r\n                    backgroundColor: 'var(--bs-primary1)',\r\n                    borderColor: 'var(--bs-primary1)',\r\n                    width:'250px'\r\n                  }}\r\n              >\r\n                Pay ₹{billAmount || ''}\r\n                {/* Pay */}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </CustomBox>\r\n      )}\r\n\r\n\r\n    \r\n    </Box>\r\n    </Box>\r\n\r\n    <Dialog\r\n  open={planPopupOpen}\r\n  onClose={()=> setPlanPopupOpen(false)}\r\n  PaperProps={{\r\n    sx: () => ({\r\n      borderRadius: 4,\r\n      p: 2,\r\n      backdropFilter: 'blur(10px)',\r\n      background: 'white',\r\n      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.2)',\r\n      width: '100%',\r\n      maxWidth: 800,\r\n      overflow: tabs?.length === 0 ? 'hidden' : 'auto',\r\n    }),\r\n  }}\r\n  \r\n>\r\n<IconButton\r\n    onClick={() => setPlanPopupOpen(false)}\r\n    sx={{\r\n      position: 'absolute',\r\n      top: 8,\r\n      right: 8,\r\n      zIndex: 10,\r\n      color: '#000',\r\n      fontSize:'16px'\r\n    }}\r\n  >\r\n    <CloseIcon />\r\n  </IconButton>\r\n    <CustomBox sx={{ width: '100%',  borderRadius: 2 }}>\r\n      {/* Tab Buttons */}\r\n      <Tabs\r\n        value={activeTab}\r\n        onChange={handleTabChange}\r\n        variant=\"scrollable\"\r\n        scrollButtons=\"auto\"\r\n        allowScrollButtonsMobile\r\n        orientation=\"horizontal\" // change to \"vertical\" if you want vertical tabs\r\n        sx={{\r\n            '& .MuiTabs-flexContainer': {\r\n              gap: '8px',\r\n            },\r\n            '& .MuiTab-root': {\r\n              fontSize: '14px',\r\n              textTransform: 'none',\r\n              padding: '10px 16px',\r\n              fontWeight: 500,\r\n              color: 'var(--bs-nav)', // default tab color\r\n            },\r\n            '& .MuiTab-root.Mui-selected': {\r\n              color: 'var(--bs-primary1)', // selected tab color\r\n              fontWeight: 'bold',\r\n            },\r\n            '& .MuiTabs-indicator': {\r\n              backgroundColor: 'var(--bs-primary1)',\r\n              height: '2px',\r\n              borderRadius: '2px',\r\n            },\r\n          }}\r\n      >\r\n        {tabs?.map((tab, index) => (\r\n          <Tab key={index} label={tab} />\r\n        ))}\r\n      </Tabs>\r\n      {tabs?.length === 0 &&\r\n            <Box  width={'100%'} display={'flex'} flexDirection={'column'} justifyContent={'center'} alignItems={'center'}>\r\n\r\n         \r\n            \r\n              <img src='/noplandata.png' style={{top:'50%'}} width={100} />\r\n              <Typography component={'h4'} >\r\n                No Plan Found\r\n              </Typography>\r\n              </Box>\r\n            }\r\n\r\n      {/* Tab Content */}\r\n      <Box sx={{ mt: 2 }}>\r\n        {/* Example content placeholder */}\r\n        {/* Replace with your actual content based on activeTab */}\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          {/* Example: <PlanList data={totalData[activeKey] || []} selectAmount={selectAmount} /> */}\r\n          {/* Content for: {total[tabs[activeTab]]} */}\r\n          <Box sx={{ mt: 2 }}>\r\n        {/* <RadioGroup value={selectedAmount?.toString() || ''} onChange={handleAmountChange}> */}\r\n          <Grid container spacing={2} height={'600px'} sx={{overflowY:'auto' , overflowX:'hidden '}}>\r\n            {total[tabs[activeTab]]?.map((plan, idx) => (\r\n            <Grid item xs={12}  key={idx}>\r\n            <Card\r\n              elevation={1}\r\n              onClick={()=>payMobileRecharge(plan?.rs)}\r\n              sx={{\r\n                borderRadius: 3,\r\n                transition: 'transform 0.3s',\r\n                '&:hover': { transform: 'scale(1.02)' },\r\n                cursor:'pointer'\r\n              }}\r\n            >\r\n              <CardContent>\r\n                <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\r\n                  {/* <CurrencyRupeeIcon color=\"primary\" /> */}\r\n                  <Typography variant=\"h5\" fontWeight=\"bold\" fontSize={16}>\r\n                    ₹{plan?.rs}\r\n                  </Typography>\r\n                </Box>\r\n        \r\n                <Divider sx={{ my: 1 }} />\r\n        \r\n                <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1} >\r\n                  {/* <AccessTimeIcon color=\"action\" /> */}\r\n                  <Typography variant=\"body1\" color=\"text.secondary\" fontSize={13}>\r\n                    Validity: {plan?.validity}\r\n                  </Typography>\r\n                </Box>\r\n        \r\n                <Box display=\"flex\" alignItems=\"center\" gap={1} >\r\n                  {/* <InfoIcon color=\"info\" /> */}\r\n                  <Typography variant=\"body2\" fontSize={13}>{plan?.desc}</Typography>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n            ))}\r\n          \r\n          </Grid>\r\n        {/* </RadioGroup> */}\r\n      </Box>\r\n        </Typography>\r\n      </Box>\r\n    </CustomBox>\r\n\r\n    {/* <DialogActions sx={{ justifyContent: 'center', mt: 2 }}>\r\n    <Button onClose={()=> setPlanPopupOpen(false)} color=\"error\" variant=\"outlined\" sx={{ borderRadius: 2,\r\n        px: 4,width:'150px'}}>\r\n      Cancel\r\n    </Button>\r\n    </DialogActions> */}\r\n    </Dialog>\r\n\r\n<Dialog\r\n  open={openTipModel}\r\n  onClose={tipPopClose}\r\n  PaperProps={{\r\n    sx: {\r\n      borderRadius: 4,\r\n      p: 2,\r\n      backdropFilter: 'blur(10px)',\r\n      background: 'rgba(255, 255, 255, 0.9)',\r\n      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.2)',\r\n      width: '100%',\r\n      maxWidth: 400,\r\n    },\r\n  }}\r\n>\r\n  <DialogTitle\r\n    sx={{\r\n      color: 'var(--bs-primary1)',\r\n      fontWeight: 600,\r\n      textAlign: 'center',\r\n      fontSize: '1.0rem',\r\n    }}\r\n  >\r\n     Enter TPIN\r\n  </DialogTitle>\r\n\r\n  <DialogContent sx={{ textAlign: 'center' }}>\r\n    <Typography sx={{ color: 'var(--bs-nav)', mb: 0.5 }} fontSize={14}>\r\n      Please enter your 4-digit TPIN to continue.\r\n    </Typography>\r\n\r\n    <Box\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      mb={2}\r\n      gap={1}\r\n    >\r\n      {/* <CurrencyRupeeIcon color=\"success\" /> */}\r\n      <Typography variant=\"h6\" sx={{ color: 'var(--bs-nav)', mb: 0.5 }} fontSize={14}>\r\n        Payable Amount: ₹{billAmount}\r\n      </Typography>\r\n    </Box>\r\n\r\n    <CustomTextField\r\n      label=\"TPIN\"\r\n      type=\"password\"\r\n      value={pin || ''}\r\n      onChange={(e) => {\r\n        const value = e.target.value;\r\n        if (/^\\d{0,4}$/.test(value)) {\r\n          setPin(value);\r\n        }\r\n      }}\r\n      autoComplete=\"off\"\r\n      inputProps={{ inputMode: 'numeric', maxLength: 4 }}\r\n      InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n            <LockIcon  />\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n      // sx={{ mt: 2 }}\r\n      fullWidth\r\n    />\r\n  </DialogContent>\r\n\r\n  <DialogActions sx={{ justifyContent: 'center', mt: 2 }}>\r\n    <Button onClick={tipPopClose} color=\"error\" variant=\"outlined\" sx={{ borderRadius: 2,\r\n        px: 4,width:'150px'}}>\r\n      Cancel\r\n    </Button>\r\n    <Button\r\n      onClick={() => {\r\n      \r\n        if (pin?.length < 4) {\r\n          alert('Please enter 4 digit TPIN');\r\n          return;\r\n        }\r\n        handlePayBill();\r\n       \r\n      }}\r\n      disabled={loading}\r\n      color=\"primary\"\r\n      variant=\"contained\"\r\n      sx={{\r\n        backgroundColor: 'var(--bs-primary1)',\r\n        borderRadius: 2,\r\n        px: 4,\r\n        width:'150px'\r\n      }}\r\n    >\r\n      Submit\r\n    </Button>\r\n  </DialogActions>\r\n</Dialog>\r\n    \r\n    \r\n    </>\r\n  );\r\n};\r\n\r\nexport default BBPSServices;\r\n","import { baseUrlImage } from \"../baseUrl\"\r\n\r\n\r\n\r\nexport const genrateUrl = url =>  baseUrlImage + (url || '')","export const  getLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n         \r\n            resolve({\r\n              latitude: position.coords.latitude,\r\n              longitude: position.coords.longitude,\r\n            });\r\n          },\r\n          (error) => {\r\n            if (error.code === error.PERMISSION_DENIED) {\r\n              alert(\"Please Enable Location to Proceed\");\r\n            }\r\n            reject(error);\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            timeout: 10000,\r\n            maximumAge: 0\r\n          });\r\n      } else {\r\n        reject(new Error('Geolocation is not supported'));\r\n      }\r\n    });\r\n  };\r\n","import { toast } from \"react-toastify\";\r\n\r\n\r\nexport default function toastMessage(error, message = \"something went wrong\") {\r\n\r\n    error === false ? toast.success(message) : toast.error(message);\r\n    // error === false  ?  setSnackbar({ open: true, message: response?.data?.message ||, severity: 'success' }) :  setSnackbar({ open: true, message , severity: 'error' });\r\n}","import { getLocation } from \"./getLocation\";\r\n\r\nconst  withLocation = (callback) => async (...args) => { \r\n    try {\r\n        let { latitude, longitude } = await getLocation();\r\n        \r\n        if (!latitude || !longitude) {\r\n            return alert(\"Please Enable Location\");\r\n        }\r\n\r\n       return await callback(latitude, longitude , ...args);\r\n    } catch (error) {\r\n        console.error(\"Error fetching location:\", error);\r\n    }\r\n};\r\n\r\nexport default  withLocation"],"names":["CustomTextField","props","_jsx","TextField","variant","size","fullWidth","sx","height","py","borderColor","color","CustomBox","_ref","children","Box","width","mx","my","px","pb","bgcolor","borderRadius","boxShadow","_ref2","_selectedOperator$cus3","_ref3","_total$tabs$activeTab","walletCall","navigate","useNavigate","serviceId","useParams","loading","setLoading","useState","operatorList","setOperatorList","error","setError","selectedOperator","setSelectedOperator","formValues","setFormValues","formErrors","setFormErrors","billDetails","setBillDetails","billAmount","setBillAmount","billFetched","setBillFetched","pin","setPin","refId","setRefId","openTipModel","setOpenTipModel","serviceName","setServicename","isFetchingRef","useRef","isMobileRecharge","setIsMobileRecharge","isDth","setIsDth","fetchRequired","setFetchRequried","circle","setCircle","selectedCircle","setSelectedCircle","planDetails","setplanDetails","planPopupOpen","setPlanPopupOpen","useEffect","async","_res$data","res","getBBPSOperator","_res$data2","_res$data2$data","_res$data3","_res$data3$data","_res$data4","_res$data4$data","_res$data4$data$servi","_res$data5","_res$data5$data","_res$data5$data$servi","data","Operator","service","service_name","fetchOperators","handleReset","fetchCircle","_res$data6","getMobileRechargeCircle","handleFetchMobilePlan","withLocation","latitude","longitude","current","body","opretorId","operatorid","state","_res$data7","_res$data9","_res$data10","getMobileRechargePlan","_res$data8","statusCode","toastMessage","message","_error$data","_error$data$data","_error$data2","_error$data2$data","handlePayBill","billPaymentData","billerId","telecomCircle","inputParameters","String","slice","amount","enquiryReferenceId","tpin","circleCode","_res$data20","_res$data22","_res$data23","payBBPSBill","_res$data21","_res$data21$data","tipPopClose","concat","id","isFormValid","_selectedOperator$cus2","customerParams","every","param","desc","value","name","regex","RegExp","test","length","minLength","tabs","plans","Object","keys","offerPlan","total","activeTab","setActiveTab","_jsxs","_Fragment","background","backgroundSize","minHeight","padding","p","maxWidth","m","position","zIndex","Loader","Alert","severity","mb","display","justifyContent","alignItems","gap","icon","src","genrateUrl","alt","style","objectFit","onError","e","currentTarget","Typography","gutterBottom","mt","fontSize","Divider","Grid","container","spacing","item","xs","Autocomplete","options","getOptionLabel","option","disabled","onChange","newVal","requiredFetch","fetchRequirement","renderOption","_createElement","key","_id","component","columnGap","logo_url","renderInput","params","label","InputLabelProps","top","sm","map","type","inputProps","maxLength","inputMode","inputType","handleInputChange","paramName","_selectedOperator$cus","find","prev","target","helperText","right","cursor","onClick","Button","_res$data15","_res$data15$data","_res$data16","cloneObj","param2","transactionAmount","getBBPSBill","bill","billerResponse","_res$data17","_res$data18","_res$data19","_res$data19$data","handleFetchBillBackground","backgroundColor","_res$data11","_res$data11$data","_res$data14","_res$data14$data","_res$data12","_res$data13","BillAmount","Array","isArray","CustomerParamsDetails","AdditionalDetails","idx","border","Name","fontWeight","Value","CustomerName","Dialog","open","onClose","PaperProps","backdropFilter","overflow","IconButton","CloseIcon","Tabs","handleTabChange","_","scrollButtons","allowScrollButtonsMobile","orientation","textTransform","tab","index","Tab","flexDirection","overflowY","overflowX","plan","Card","elevation","payMobileRecharge","rs","transition","transform","CardContent","validity","DialogTitle","textAlign","DialogContent","autoComplete","InputProps","startAdornment","InputAdornment","LockIcon","DialogActions","alert","url","baseUrlImage","getLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","code","PERMISSION_DENIED","enableHighAccuracy","timeout","maximumAge","Error","arguments","undefined","toast","success","callback","_len","args","_key","console"],"sourceRoot":""}