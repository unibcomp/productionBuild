{"version":3,"file":"static/js/5291.84b2bcbd.chunk.js","mappings":"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","sources":["pages/bbpsServices/index.jsx","utils/genrateUrl.js","utils/getLocation.js","utils/toastMessage.js","utils/withLocation.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport {\r\n  Autocomplete,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  Alert,\r\n  Divider,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Tabs,\r\n  Tab,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Paper,\r\n  InputAdornment,\r\n} from \"@mui/material\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport {\r\n  getBBPSBill,\r\n  getBBPSOperator,\r\n  getMobileRechargeCircle,\r\n  getMobileRechargePlan,\r\n  payBBPSBill,\r\n} from \"../../api/login/Login\";\r\nimport Loader from \"../../common/loader/Loader\";\r\nimport withLocation from \"../../utils/withLocation\";\r\nimport toastMessage from \"../../utils/toastMessage\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { genrateUrl } from \"../../utils/genrateUrl\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nconst CustomTextField = (props) => (\r\n  <TextField\r\n    variant=\"outlined\"\r\n    size=\"small\"\r\n    fullWidth\r\n    sx={{\r\n      \"& .MuiInputLabel-root\": {\r\n        color: \"var(--bs-primary2)\",\r\n      },\r\n      \"& .MuiOutlinedInput-root\": {\r\n        height: 42,\r\n        \"& input, & textarea\": {\r\n          color: \"var(--bs-primary2) !important\",\r\n        },\r\n        \"& fieldset\": {\r\n          borderColor: \"var(--bs-primary2)\",\r\n        },\r\n        \"&:hover fieldset\": {\r\n          borderColor: \"var(--bs-primary1)\",\r\n        },\r\n        \"&.Mui-focused fieldset\": {\r\n          borderColor: \"var(--bs-primary1)\",\r\n        },\r\n      },\r\n    }}\r\n    InputLabelProps={{\r\n      shrink: true,\r\n    }}\r\n    {...props}\r\n  />\r\n);\r\n\r\nconst CustomBox = ({ children }) => (\r\n  <Box\r\n    sx={{\r\n      width: \"100%\",\r\n      mx: \"auto\",\r\n      my: 1,\r\n      px: 3,\r\n      py: 4,\r\n      pb: 6,\r\n      backgroundColor: \"var(--bs-primary3)\",\r\n      color: \"var(--bs-primary2)\",\r\n    }}\r\n  >\r\n    {children}\r\n  </Box>\r\n);\r\n\r\nconst BBPSServices = ({ walletCall }) => {\r\n  const navigate = useNavigate();\r\n  const { serviceId } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [operatorList, setOperatorList] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [selectedOperator, setSelectedOperator] = useState(null);\r\n  const [formValues, setFormValues] = useState({});\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [billDetails, setBillDetails] = useState(null);\r\n  const [billAmount, setBillAmount] = useState(\"\");\r\n  const [billFetched, setBillFetched] = useState(false);\r\n  const [pin, setPin] = useState();\r\n  const [refId, setRefId] = useState(\"\");\r\n  const [openTipModel, setOpenTipModel] = useState(false);\r\n  const [serviceName, setServicename] = useState(\"\");\r\n  const isFetchingRef = useRef(false);\r\n\r\n  // Mobile Recharge Special State\r\n  const [isMobileRecharge, setIsMobileRecharge] = useState(false);\r\n  const [isDth, setIsDth] = useState(false);\r\n  const [fetchRequired, setFetchRequried] = useState(false);\r\n  const [circle, setCircle] = useState([]);\r\n  const [selectedCircle, setSelectedCircle] = useState(null);\r\n  const [planDetails, setplanDetails] = useState(null);\r\n  const [planPopupOpen, setPlanPopupOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!serviceId) {\r\n      setError(\"Invalid service ID\");\r\n      return;\r\n    }\r\n\r\n    const fetchOperators = async () => {\r\n      setLoading(true);\r\n      setIsMobileRecharge(false);\r\n      setIsDth(false);\r\n      try {\r\n        const res = await getBBPSOperator(serviceId);\r\n        if (res?.data?.error) {\r\n          setError(\"Failed to fetch operator data\");\r\n        } else {\r\n          setOperatorList(res?.data?.data?.Operator || []);\r\n          setSelectedOperator(null);\r\n          setSelectedCircle(null);\r\n          setServicename(res?.data?.data?.service);\r\n          if (res?.data?.data?.service?.service_name === \"Mobile Recharge\") {\r\n            setIsMobileRecharge(true);\r\n          }\r\n          if (res?.data?.data?.service?.service_name === \"DTH\") {\r\n            setIsDth(true);\r\n          }\r\n\r\n          // Mobile Recharge\r\n        }\r\n      } catch {\r\n        setError(\"Something went wrong while fetching operators\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchOperators();\r\n    handleReset();\r\n  }, [serviceId]);\r\n\r\n  // const handleInputChange = (paramName, value) => {\r\n  //   setFormValues((prev) => ({ ...prev, [paramName]: value }));\r\n  //   const param = selectedOperator?.customerParams?.find(p => p.name === paramName);\r\n  //   if (param?.regex && !new RegExp(param.regex).test(value)) {\r\n  //     setFormErrors((prev) => ({ ...prev, [paramName]: 'Invalid input' }));\r\n  //   } else {\r\n  //     setFormErrors((prev) => ({ ...prev, [paramName]: '' }));\r\n  //   }\r\n  // };\r\n\r\n  const handleInputChange = (paramName, value) => {\r\n    const param = selectedOperator?.customerParams?.find(\r\n      (p) => p.name === paramName\r\n    );\r\n\r\n    // Skip validation and just set value if param is Amount\r\n    if (param?.desc === \"Amount\") {\r\n      setFormValues((prev) => ({ ...prev, [paramName]: value }));\r\n      return;\r\n    }\r\n\r\n    // Otherwise, normal flow\r\n    setFormValues((prev) => ({ ...prev, [paramName]: value }));\r\n\r\n    if (param?.regex && !new RegExp(param.regex).test(value)) {\r\n      setFormErrors((prev) => ({ ...prev, [paramName]: \"Invalid input\" }));\r\n    } else {\r\n      setFormErrors((prev) => ({ ...prev, [paramName]: \"\" }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isMobileRecharge) {\r\n      fetchCircle();\r\n    }\r\n  }, [isMobileRecharge]);\r\n\r\n  const fetchCircle = async () => {\r\n    try {\r\n      let res = await getMobileRechargeCircle();\r\n      setCircle(res?.data?.data || []);\r\n    } catch (error) {\r\n      setCircle([]);\r\n    }\r\n  };\r\n\r\n  const handleFetchMobilePlan = withLocation(async (latitude, longitude) => {\r\n    if (isFetchingRef.current) return;\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setplanDetails(null);\r\n    setBillFetched(false);\r\n    isFetchingRef.current = true;\r\n    try {\r\n      const body = {\r\n        opretorId: selectedOperator?.operatorid,\r\n        state: selectedCircle?.circle || \"ALL INDIA\",\r\n        latitude,\r\n        longitude,\r\n      };\r\n\r\n      try {\r\n        let res = await getMobileRechargePlan(body);\r\n        if (res?.data?.statusCode === 200) {\r\n          setplanDetails(res?.data?.data);\r\n          setBillFetched(false);\r\n          setPlanPopupOpen(true);\r\n        }\r\n        toastMessage(res?.data?.error, res?.data?.message);\r\n      } catch (error) {\r\n        toastMessage(error?.data?.data?.error, error?.data?.data?.message);\r\n      }\r\n    } catch (error) {\r\n    } finally {\r\n      setLoading(false);\r\n      isFetchingRef.current = false;\r\n    }\r\n  });\r\n\r\n  const handleFetchBill = async () => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setRefId(\"\");\r\n    setBillDetails(null);\r\n    setBillFetched(false);\r\n\r\n    try {\r\n      const body = {\r\n        billerId: selectedOperator?.operatorid,\r\n        inputParameters: formValues,\r\n      };\r\n      if (!fetchRequired) {\r\n        body.transactionAmount = billAmount;\r\n      }\r\n\r\n      const res = await getBBPSBill(body);\r\n      const bill = res?.data?.data?.billerResponse;\r\n\r\n      if (!bill) {\r\n        toastMessage(res.data?.error, res?.data?.message);\r\n      } else {\r\n        setBillDetails(bill);\r\n        setBillAmount(bill?.BillAmount || \"\");\r\n        setBillFetched(true);\r\n        setRefId(res?.data?.data?.refId);\r\n      }\r\n    } catch {\r\n      setError(\"Failed to fetch bill. Please try again.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFetchBillBackground = async () => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setRefId(\"\");\r\n    setBillDetails(null);\r\n    setBillFetched(false);\r\n\r\n    try {\r\n      let cloneObj = { ...formValues };\r\n\r\n      if (selectedOperator?.operatorid === \"SUND00000NAT02\") {\r\n        cloneObj.param2 = billAmount;\r\n      }\r\n\r\n      const body = {\r\n        billerId: selectedOperator?.operatorid,\r\n        inputParameters: cloneObj,\r\n      };\r\n      if (!fetchRequired) {\r\n        body.transactionAmount = billAmount;\r\n      }\r\n\r\n      const res = await getBBPSBill(body);\r\n      const bill = res?.data?.data?.billerResponse;\r\n\r\n      if (res?.data?.error === true) {\r\n        toastMessage(res.data?.error, res?.data?.message);\r\n      } else {\r\n        setBillDetails(bill);\r\n        // setBillAmount(bill?.BillAmount || '');\r\n        setOpenTipModel(true);\r\n        setBillFetched(false);\r\n        setRefId(res?.data?.data?.refId);\r\n      }\r\n    } catch {\r\n      setError(\"Failed to fetch bill. Please try again.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  //Subimit after in tpin confirm button\r\n  const handlePayBill = withLocation(async (latitude, longitude) => {\r\n    // console.log('Paying bill of ₹', billAmount);\r\n    setLoading(true);\r\n    const billPaymentData = {\r\n      billerId: selectedOperator?.operatorid,\r\n      telecomCircle: \"\",\r\n      inputParameters: formValues,\r\n      latitude: String(latitude).slice(0, 7),\r\n      longitude: String(longitude).slice(0, 7),\r\n\r\n      amount: billAmount,\r\n      enquiryReferenceId: refId,\r\n      tpin: pin,\r\n    };\r\n    if (isMobileRecharge) {\r\n      billPaymentData.telecomCircle = selectedCircle?.circleCode;\r\n    }\r\n\r\n    try {\r\n      let res = await payBBPSBill(billPaymentData);\r\n      if (res?.data?.error === false) {\r\n        handleReset();\r\n        walletCall();\r\n        tipPopClose();\r\n        navigate(`/bill-invoice/${res?.data?.data?.id}`);\r\n      }\r\n      setPin(\"\");\r\n      toastMessage(res?.data?.error, res?.data?.message);\r\n    } catch (error) {\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  });\r\n\r\n  const handleReset = () => {\r\n    setFormValues({});\r\n    setFormErrors({});\r\n    setBillDetails(null);\r\n    setBillAmount(\"\");\r\n    setBillFetched(false);\r\n    setError(\"\");\r\n    setplanDetails(null);\r\n    //    setSelectedCircle(null)\r\n  };\r\n\r\n  // const isFormValid = () => {\r\n  //   return selectedOperator?.customerParams?.every(param => {\r\n  //     const value = formValues[param.name] || '';\r\n  //     const isValid = !param.regex || new RegExp(param.regex).test(value);\r\n  //     return isValid && value.length >= param.minLength;\r\n  //   });\r\n  // };\r\n\r\n  const isFormValid = () => {\r\n    return selectedOperator?.customerParams?.every((param) => {\r\n      if (param.desc === \"Amount\") return true; // Skip validation for hidden field\r\n\r\n      const value = formValues[param.name] || \"\";\r\n      const isValid = !param.regex || new RegExp(param.regex).test(value);\r\n      return isValid && value.length >= param.minLength;\r\n    });\r\n  };\r\n  const tipPopClose = () => {\r\n    setOpenTipModel(false);\r\n    setPin(\"\");\r\n  };\r\n\r\n  const tab1 = planDetails?.plans ? Object.keys(planDetails?.plans) : [];\r\n  const tab2 = planDetails?.offerPlan\r\n    ? Object.keys(planDetails?.offerPlan)\r\n    : [];\r\n  const tabs = [...tab1, ...tab2];\r\n  const Data1 = planDetails?.plans || {};\r\n  const Data2 = planDetails?.offerPlan || {};\r\n  const total = { ...Data1, ...Data2 };\r\n\r\n  const [activeTab, setActiveTab] = useState(0);\r\n\r\n  const handleTabChange = (_, data) => {\r\n    setActiveTab(data);\r\n  };\r\n  const payMobileRecharge = (value) => {\r\n    setBillAmount(value);\r\n    setPlanPopupOpen(false);\r\n    // setOpenTipModel(true)\r\n  };\r\n  // Dth and mobile pay handle\r\n\r\n  const handlePay = async () => {\r\n    if (!fetchRequired || isDth) {\r\n      await handleFetchBillBackground();\r\n    } else {\r\n      setOpenTipModel(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          background: \"var(--bs-primary3)\",\r\n          color: \"var(--bs-primary2)\",\r\n          backgroundSize: \"cover\",\r\n          minHeight: \"100vh\",\r\n          padding: 2,\r\n        }}\r\n      >\r\n        <Box\r\n          p={0.5}\r\n          maxWidth={\"620px\"}\r\n          m={\"auto\"}\r\n          position=\"relative\"\r\n          zIndex={1}\r\n        >\r\n          {loading && <Loader />}\r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          <CustomBox>\r\n            <Box\r\n              display=\"flex\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                {serviceName?.icon && (\r\n                  <img\r\n                    src={genrateUrl(serviceName?.icon)}\r\n                    alt=\"Service Icon\"\r\n                    width={30}\r\n                    height={30}\r\n                    style={{ objectFit: \"contain\" }}\r\n                    onError={(e) => {\r\n                      e.currentTarget.src = \"/bbpslogo.png\";\r\n                    }}\r\n                  />\r\n                )}\r\n                <Typography variant=\"h6\" gutterBottom mt={1} fontSize={18}>\r\n                  {serviceName?.service_name}\r\n                </Typography>\r\n              </Box>\r\n\r\n              {/* Right Side: BBPS Logo */}\r\n              <Box>\r\n                <img src=\"/bbpslogo.png\" alt=\"BBPS Logo\" width={90} />\r\n              </Box>\r\n            </Box>\r\n\r\n            <Divider sx={{ mb: 2 }} />\r\n\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <Autocomplete\r\n                  options={operatorList}\r\n                  getOptionLabel={(option) => option.name}\r\n                  value={selectedOperator}\r\n                  disabled={billFetched}\r\n                  onChange={(e, newVal) => {\r\n                    setSelectedOperator(newVal);\r\n                    let requiredFetch =\r\n                      newVal?.fetchRequirement === \"MANDATORY\";\r\n                    setFetchRequried(requiredFetch);\r\n                    handleReset();\r\n                  }}\r\n                  fullWidth\r\n                  renderOption={(props, option) => (\r\n                    <li {...props} key={option._id}>\r\n                      <Box\r\n                        component=\"div\"\r\n                        sx={{\r\n                          fontSize: \"13px\", // Change font size here\r\n                          color: \"var(--bs-primary2)\", // Change text color here\r\n                        }}\r\n                        display={\"flex\"}\r\n                        columnGap={1.5}\r\n                        alignItems={\"center\"}\r\n                      >\r\n                        <img\r\n                          src={option?.logo_url}\r\n                          alt=\"Service Icon\"\r\n                          width={20}\r\n                          height={20}\r\n                          style={{ objectFit: \"contain\" }}\r\n                          onError={(e) => {\r\n                            e.currentTarget.src = \"/bbpslogo.png\";\r\n                          }}\r\n                        />\r\n                        {option.name}\r\n                      </Box>\r\n                    </li>\r\n                  )}\r\n                  renderInput={(params) => (\r\n                    <CustomTextField\r\n                      {...params}\r\n                      label=\"Select Operator\"\r\n                      fullWidth\r\n                      InputLabelProps={{\r\n                        sx: {\r\n                          \"&.MuiInputLabel-root:not(.MuiInputLabel-shrink)\": {\r\n                            top: \"-6px\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* //Mobile opertor on isMobileRecharge true  */}\r\n              {selectedOperator && isMobileRecharge && (\r\n                <Grid item xs={12} sm={6}>\r\n                  <Autocomplete\r\n                    options={circle}\r\n                    getOptionLabel={(option) => option.circle}\r\n                    value={selectedCircle}\r\n                    onChange={(e, newVal) => {\r\n                      setSelectedCircle(newVal);\r\n                      // handleReset();\r\n                    }}\r\n                    disabled={billFetched}\r\n                    fullWidth\r\n                    renderOption={(props, option) => (\r\n                      <li {...props}>\r\n                        <Box\r\n                          component=\"span\"\r\n                          sx={{\r\n                            fontSize: \"13px\", // Change font size here\r\n                            color: \"var(--bs-primary2)\", // Change text color here\r\n                          }}\r\n                        >\r\n                          {option.circle}\r\n                        </Box>\r\n                      </li>\r\n                    )}\r\n                    renderInput={(params) => (\r\n                      <CustomTextField\r\n                        {...params}\r\n                        label=\"Select Circle\"\r\n                        fullWidth\r\n                        InputLabelProps={{\r\n                          sx: {\r\n                            \"&.MuiInputLabel-root:not(.MuiInputLabel-shrink)\": {\r\n                              top: \"-6px\",\r\n                            },\r\n                          },\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n              )}\r\n\r\n              {/* {selectedOperator?.customerParams?.map((param) => (\r\n            <Grid item xs={12} sm={6} key={param.name}>\r\n              <CustomTextField\r\n                label={param.desc}\r\n                \r\n                type=\"text\"\r\n                value={formValues[param.name] || ''}\r\n                inputProps={{\r\n                  maxLength: param.maxLength,\r\n                  minLength: param.minLength,\r\n                  inputMode: param.inputType === \"NUMERIC\" ? \"numeric\" : \"text\",\r\n                \r\n                }}\r\n                onChange={(e) => handleInputChange(param.name, e.target.value)}\r\n                error={!!formErrors[param.name]}\r\n                helperText={formErrors[param.name]}\r\n                disabled={billFetched}\r\n              />\r\n            </Grid>\r\n          ))} */}\r\n              {selectedOperator?.customerParams?.map((param) => (\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  sm={6}\r\n                  key={param.name}\r\n                  sx={{ display: param.desc === \"Amount\" ? \"none\" : \"block\" }}\r\n                >\r\n                  <CustomTextField\r\n                    label={param.desc}\r\n                    type={param.desc === \"Amount\" ? \"hidden\" : \"text\"}\r\n                    value={formValues[param.name] || \"\"}\r\n                    inputProps={{\r\n                      maxLength: param.maxLength,\r\n                      minLength: param.minLength,\r\n                      inputMode:\r\n                        param.inputType === \"NUMERIC\" ? \"numeric\" : \"text\",\r\n                    }}\r\n                    onChange={(e) =>\r\n                      handleInputChange(param.name, e.target.value)\r\n                    }\r\n                    error={!!formErrors[param.name]}\r\n                    helperText={formErrors[param.name]}\r\n                    disabled={billFetched}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n\r\n              {selectedOperator && !fetchRequired && (\r\n                <>\r\n                  <Grid item xs={12} sm={12}>\r\n                    <Box sx={{ position: \"relative\" }}>\r\n                      <CustomTextField\r\n                        label=\"Amount to Pay (₹)\"\r\n                        value={billAmount}\r\n                        type=\"number\"\r\n                        disabled={isMobileRecharge}\r\n                        onChange={(e) => setBillAmount(e.target.value)}\r\n                      />\r\n                      {((!fetchRequired && isDth) || isMobileRecharge) && (\r\n                        <Box\r\n                          sx={{\r\n                            position: \"absolute\",\r\n                            right: \"10px\",\r\n                            top: \"10px\",\r\n                            cursor: \"pointer\",\r\n                            backgroundColor: \"var(--bs-primary3)\",\r\n                            color: \"var(--bs-primary2)\",\r\n\r\n                            \"&:hover\": {\r\n                              backgroundColor: \"var(--bs-primary1)\",\r\n                            },\r\n                            \"&.Mui-disabled\": {\r\n                              backgroundColor: \"rgba(0,0,0,0.12)\",\r\n                              color: \"var(--bs-primary2)\",\r\n                              opacity: 0.6,\r\n                            },\r\n                          }}\r\n                          onClick={handleFetchMobilePlan}\r\n                        >\r\n                          <p style={{ fontSize: \"12px\", cursor: \"pointer\" }}>\r\n                            View Plans\r\n                          </p>\r\n                        </Box>\r\n                      )}\r\n                    </Box>\r\n                  </Grid>\r\n                  <Grid container item sx={12} justifyContent={\"center\"}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      disabled={\r\n                        !selectedOperator || billAmount < 9 || !isFormValid()\r\n                      }\r\n                      onClick={handlePay}\r\n                      sx={{\r\n                        width: 250,\r\n                        backgroundColor: \"var(--bs-primary3)\",\r\n                        color: \"var(--bs-primary2)\",\r\n                        textTransform: \"none\",\r\n                        fontWeight: 600,\r\n                        \"&:hover\": {\r\n                          backgroundColor: \"var(--bs-primary1)\",\r\n                        },\r\n                        \"&.Mui-disabled\": {\r\n                          backgroundColor: \"rgba(0,0,0,0.12)\",\r\n                          color: \"var(--bs-primary2)\",\r\n                          opacity: 0.6,\r\n                        },\r\n                      }}\r\n                    >\r\n                      Process to Pay {billAmount}\r\n                    </Button>\r\n                  </Grid>{\" \"}\r\n                </>\r\n              )}\r\n\r\n              {selectedOperator && fetchRequired && (\r\n                <Grid container item sx={12} justifyContent={\"center\"}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"var(--bs-primary2)\"\r\n                    disabled={\r\n                      !selectedOperator || !isFormValid() || billFetched\r\n                    }\r\n                    onClick={handleFetchBill}\r\n                    sx={{\r\n                      width: \"250px\",\r\n                      borderColor: \"var(--bs-primary3) !important\", // Custom colors\r\n                      backgroundColor: \"var(--bs-primary1) !important\",\r\n                      color: \"var(--bs-primary2) !important\",\r\n                    }}\r\n                  >\r\n                    Fetch Bill\r\n                  </Button>\r\n                </Grid>\r\n              )}\r\n\r\n              {/* {selectedOperator && !billFetched && (\r\n            <Box display={'flex'} gap={2} mt={2}  sx={{\r\n              flexDirection: {\r\n                sm: 'column',\r\n                md: 'row',\r\n              },\r\n              justifyContent:'center',\r\n              width:\"100%\"\r\n            }}\r\n             >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isMobileRecharge ? !isFormValid() || !selectedCircle : !isFormValid()}\r\n\r\n                onClick={(isMobileRecharge || (isDth && fetchRequired) ) ? handleFetchMobilePlan :  handleFetchBill}\r\n\r\n                sx={{\r\n                       width:'250px',\r\n                    borderColor: 'var(--bs-primary1)', // Custom colors\r\n                    \r\n                    backgroundColor: 'var(--bs-primary1)', // Custom colors\r\n                    color: \"white\",\r\n        \r\n                  }}\r\n              >\r\n                {(isMobileRecharge || (isDth && fetchRequired) )  ? 'Fetch Plan' :\"Fetch Bill\" }\r\n              </Button>\r\n\r\n              {(!fetchRequired) &&\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={ !isFormValid() || billAmount < 10}\r\n                onClick={()=>payMobileRecharge(billAmount)}\r\n\r\n                sx={{\r\n                       width:'250px',\r\n                    borderColor: 'var(--bs-primary1)', // Custom colors\r\n                    marginLeft:2,\r\n                    backgroundColor: 'var(--bs-primary1)', // Custom colors\r\n                    color: \"white\",\r\n        \r\n                  }}\r\n              >\r\n                {'Pay Bill' }\r\n              </Button> }\r\n            </Box>\r\n          )}\r\n\r\n          {\r\n            selectedOperator && billFetched && (\r\n                <Box  display={'flex'} gap={2} mt={2}  sx={{\r\n                  flexDirection: {\r\n                    sm: 'column',\r\n                    md: 'row',\r\n                  },\r\n                  justifyContent:'center',\r\n                  width:\"100%\"\r\n                }}>\r\n                <Button\r\n                variant='outlined'\r\n                color=\"error\"\r\n                onClick={handleReset}\r\n                sx={{\r\n                    width:'250px'\r\n                }}\r\n              >\r\n                Reset\r\n              </Button>\r\n              {( (!fetchRequired && !billFetched)   ) &&\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={ !isFormValid() || billAmount < 10}\r\n                onClick={()=>payMobileRecharge(billAmount)}\r\n\r\n                sx={{\r\n                       width:'250px',\r\n                    borderColor: 'var(--bs-primary1)', // Custom colors\r\n                  \r\n                    backgroundColor: 'var(--bs-primary1)', // Custom colors\r\n                    color: \"white\",\r\n        \r\n                  }}\r\n              >\r\n                {'Pay Bill' }\r\n              </Button> }\r\n              </Box>\r\n            )\r\n          } */}\r\n            </Grid>\r\n          </CustomBox>\r\n\r\n          {billFetched && billDetails && (\r\n            <CustomBox>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Bill Details\r\n              </Typography>\r\n              <Divider sx={{ mb: 2 }} />\r\n\r\n              <Grid container spacing={2}>\r\n                {[\r\n                  ...(Array.isArray(billDetails?.CustomerParamsDetails)\r\n                    ? billDetails.CustomerParamsDetails\r\n                    : []),\r\n                  ...(Array.isArray(billDetails?.AdditionalDetails)\r\n                    ? billDetails.AdditionalDetails\r\n                    : []),\r\n                ]?.map((item, idx) => (\r\n                  <Grid item xs={12} sm={6} key={idx}>\r\n                    <Box\r\n                      display=\"flex\"\r\n                      justifyContent=\"space-between\"\r\n                      border=\"1px solid #eee\"\r\n                      borderRadius={1}\r\n                      p={1}\r\n                      boxShadow={1}\r\n                    >\r\n                      <Typography variant=\"body2\" color=\"var(--bs-primary2)\">\r\n                        {item.Name}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" fontWeight={500}>\r\n                        {item.Value}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Grid>\r\n                ))}\r\n\r\n                <Grid item xs={12} sm={6}>\r\n                  <Box\r\n                    display=\"flex\"\r\n                    justifyContent=\"space-between\"\r\n                    border=\"1px solid #eee\"\r\n                    borderRadius={1}\r\n                    p={1}\r\n                    boxShadow={1}\r\n                  >\r\n                    <Typography variant=\"body2\" color=\"var(--bs-primary2)\">\r\n                      Customer Name\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" fontWeight={500}>\r\n                      {billDetails.CustomerName}\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6}>\r\n                  <CustomTextField\r\n                    label=\"Amount to Pay (₹)\"\r\n                    value={billAmount}\r\n                    type=\"number\"\r\n                    onChange={(e) => setBillAmount(e.target.value)}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid container item xs={12} justifyContent=\"center\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"var(--bs-primary2)\"\r\n                    disabled={!billAmount}\r\n                    // onClick={handlePayBill}\r\n                    onClick={() => setOpenTipModel(true)}\r\n                    // fullWidth\r\n\r\n                    sx={{\r\n                      backgroundColor: \"var(--bs-primary1)\",\r\n                      borderColor: \"var(--bs-primary1)\",\r\n                      width: \"250px\",\r\n                    }}\r\n                  >\r\n                    Pay ₹{billAmount || \"\"}\r\n                    {/* Pay */}\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </CustomBox>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      <Dialog\r\n        open={planPopupOpen}\r\n        onClose={() => setPlanPopupOpen(false)}\r\n        PaperProps={{\r\n          sx: () => ({\r\n            borderRadius: 4,\r\n            p: 2,\r\n            backdropFilter: \"blur(10px)\",\r\n            background: \"white\",\r\n            boxShadow: \"0 8px 32px rgba(0, 0, 0, 0.2)\",\r\n            width: \"100%\",\r\n            maxWidth: 800,\r\n            overflow: tabs?.length === 0 ? \"hidden\" : \"auto\",\r\n          }),\r\n        }}\r\n      >\r\n        <IconButton\r\n          onClick={() => setPlanPopupOpen(false)}\r\n          sx={{\r\n            position: \"absolute\",\r\n            top: 8,\r\n            right: 8,\r\n            zIndex: 10,\r\n            color: \"var(--bs-primary2)\",\r\n            fontSize: \"16px\",\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n        <CustomBox sx={{ width: \"100%\", borderRadius: 2 }}>\r\n          {/* Tab Buttons */}\r\n          <Tabs\r\n            value={activeTab}\r\n            onChange={handleTabChange}\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"auto\"\r\n            allowScrollButtonsMobile\r\n            orientation=\"horizontal\" // change to \"vertical\" if you want vertical tabs\r\n            sx={{\r\n              \"& .MuiTabs-flexContainer\": {\r\n                gap: \"8px\",\r\n              },\r\n              \"& .MuiTab-root\": {\r\n                fontSize: \"14px\",\r\n                textTransform: \"none\",\r\n                padding: \"10px 16px\",\r\n                fontWeight: 500,\r\n                color: \"var(--bs-primary2)\", // default tab color\r\n              },\r\n              \"& .MuiTab-root.Mui-selected\": {\r\n                color: \"var(--bs-primary2)\", // selected tab color\r\n                fontWeight: \"bold\",\r\n              },\r\n              \"& .MuiTabs-indicator\": {\r\n                backgroundColor: \"var(--bs-primary1)\",\r\n                height: \"2px\",\r\n                borderRadius: \"2px\",\r\n              },\r\n            }}\r\n          >\r\n            {tabs?.map((tab, index) => (\r\n              <Tab key={index} label={tab} />\r\n            ))}\r\n          </Tabs>\r\n          {tabs?.length === 0 && (\r\n            <Box\r\n              width={\"100%\"}\r\n              display={\"flex\"}\r\n              flexDirection={\"column\"}\r\n              justifyContent={\"center\"}\r\n              alignItems={\"center\"}\r\n            >\r\n              <img src=\"/noplandata.png\" style={{ top: \"50%\" }} width={100} />\r\n              <Typography component={\"h4\"}>No Plan Found</Typography>\r\n            </Box>\r\n          )}\r\n\r\n          {/* Tab Content */}\r\n          <Box sx={{ mt: 2 }}>\r\n            {/* Example content placeholder */}\r\n            {/* Replace with your actual content based on activeTab */}\r\n            <Typography variant=\"body1\" color=\"var(--bs-primary2)\">\r\n              {/* Example: <PlanList data={totalData[activeKey] || []} selectAmount={selectAmount} /> */}\r\n              {/* Content for: {total[tabs[activeTab]]} */}\r\n              <Box sx={{ mt: 2 }}>\r\n                {/* <RadioGroup value={selectedAmount?.toString() || ''} onChange={handleAmountChange}> */}\r\n                <Grid\r\n                  container\r\n                  spacing={2}\r\n                  height={\"600px\"}\r\n                  sx={{ overflowY: \"auto\", overflowX: \"hidden \" }}\r\n                >\r\n                  {total[tabs[activeTab]]?.map((plan, idx) => (\r\n                    <Grid item xs={12} key={idx}>\r\n                      <Card\r\n                        elevation={1}\r\n                        onClick={() => payMobileRecharge(plan?.rs)}\r\n                        sx={{\r\n                          borderRadius: 3,\r\n                          transition: \"transform 0.3s\",\r\n                          \"&:hover\": { transform: \"scale(1.02)\" },\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <CardContent>\r\n                          <Box\r\n                            display=\"flex\"\r\n                            alignItems=\"center\"\r\n                            gap={1}\r\n                            mb={1}\r\n                          >\r\n                            {/* <CurrencyRupeeIcon color=\"primary\" /> */}\r\n                            <Typography\r\n                              variant=\"h5\"\r\n                              fontWeight=\"bold\"\r\n                              fontSize={16}\r\n                            >\r\n                              ₹{plan?.rs}\r\n                            </Typography>\r\n                          </Box>\r\n\r\n                          <Divider sx={{ my: 1 }} />\r\n\r\n                          <Box\r\n                            display=\"flex\"\r\n                            alignItems=\"center\"\r\n                            gap={1}\r\n                            mb={1}\r\n                          >\r\n                            {/* <AccessTimeIcon color=\"action\" /> */}\r\n                            <Typography\r\n                              variant=\"body1\"\r\n                              color=\"var(--bs-primary2)\"\r\n                              fontSize={13}\r\n                            >\r\n                              Validity: {plan?.validity}\r\n                            </Typography>\r\n                          </Box>\r\n\r\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                            {/* <InfoIcon color=\"info\" /> */}\r\n                            <Typography variant=\"body2\" fontSize={13}>\r\n                              {plan?.desc}\r\n                            </Typography>\r\n                          </Box>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n                {/* </RadioGroup> */}\r\n              </Box>\r\n            </Typography>\r\n          </Box>\r\n        </CustomBox>\r\n\r\n        {/* <DialogActions sx={{ justifyContent: 'center', mt: 2 }}>\r\n    <Button onClose={()=> setPlanPopupOpen(false)} color=\"error\" variant=\"outlined\" sx={{ borderRadius: 2,\r\n        px: 4,width:'150px'}}>\r\n      Cancel\r\n    </Button>\r\n    </DialogActions> */}\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        open={openTipModel}\r\n        onClose={tipPopClose}\r\n        PaperProps={{\r\n          sx: {\r\n            borderRadius: 4,\r\n            p: 2,\r\n            backdropFilter: \"blur(10px)\",\r\n            background: \"rgba(255, 255, 255, 0.9)\",\r\n            boxShadow: \"0 8px 32px rgba(0, 0, 0, 0.2)\",\r\n            width: \"100%\",\r\n            maxWidth: 400,\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle\r\n          sx={{\r\n            color: \"var(--bs-primary2)\",\r\n            fontWeight: 600,\r\n            textAlign: \"center\",\r\n            fontSize: \"1.0rem\",\r\n          }}\r\n        >\r\n          Enter TPIN\r\n        </DialogTitle>\r\n\r\n        <DialogContent sx={{ textAlign: \"center\" }}>\r\n          <Typography sx={{ color: \"var(--bs-primary2)\", mb: 0.5 }} fontSize={14}>\r\n            Please enter your 4-digit TPIN to continue.\r\n          </Typography>\r\n\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            mb={2}\r\n            gap={1}\r\n          >\r\n            {/* <CurrencyRupeeIcon color=\"success\" /> */}\r\n            <Typography\r\n              variant=\"h6\"\r\n              sx={{ color: \"var(--bs-primary2)\", mb: 0.5 }}\r\n              fontSize={14}\r\n            >\r\n              Payable Amount: ₹{billAmount}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <CustomTextField\r\n            label=\"TPIN\"\r\n            type=\"password\"\r\n            value={pin || \"\"}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (/^\\d{0,4}$/.test(value)) {\r\n                setPin(value);\r\n              }\r\n            }}\r\n            autoComplete=\"off\"\r\n            inputProps={{ inputMode: \"numeric\", maxLength: 4 }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <LockIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            // sx={{ mt: 2 }}\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n\r\n        <DialogActions sx={{ justifyContent: \"center\", mt: 2 }}>\r\n          <Button\r\n            onClick={tipPopClose}\r\n            color=\"var(--bs-primary2)\"\r\n            variant=\"outlined\"\r\n            sx={{ borderRadius: 2, px: 4, width: \"150px\" }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              if (pin?.length < 4) {\r\n                alert(\"Please enter 4 digit TPIN\");\r\n                return;\r\n              }\r\n              handlePayBill();\r\n            }}\r\n            disabled={loading}\r\n            color=\"var(--bs-primary2)\"\r\n            variant=\"contained\"\r\n            sx={{\r\n              backgroundColor: \"var(--bs-primary1)\",\r\n              borderRadius: 2,\r\n              px: 4,\r\n              width: \"150px\",\r\n            }}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BBPSServices;\r\n","import { baseUrlImage } from \"../baseUrl\"\r\n\r\n\r\n\r\nexport const genrateUrl = url =>  baseUrlImage + (url || '')","export const  getLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n         \r\n            resolve({\r\n              latitude: position.coords.latitude,\r\n              longitude: position.coords.longitude,\r\n            });\r\n          },\r\n          (error) => {\r\n            if (error.code === error.PERMISSION_DENIED) {\r\n              alert(\"Please Enable Location to Proceed\");\r\n            }\r\n            reject(error);\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            timeout: 10000,\r\n            maximumAge: 0\r\n          });\r\n      } else {\r\n        reject(new Error('Geolocation is not supported'));\r\n      }\r\n    });\r\n  };\r\n","import { toast } from \"react-toastify\";\r\n\r\n\r\nexport default function toastMessage(error, message = \"something went wrong\") {\r\n\r\n    error === false ? toast.success(message) : toast.error(message);\r\n    // error === false  ?  setSnackbar({ open: true, message: response?.data?.message ||, severity: 'success' }) :  setSnackbar({ open: true, message , severity: 'error' });\r\n}","import { getLocation } from \"./getLocation\";\r\n\r\nconst  withLocation = (callback) => async (...args) => { \r\n    try {\r\n        let { latitude, longitude } = await getLocation();\r\n        \r\n        if (!latitude || !longitude) {\r\n            return alert(\"Please Enable Location\");\r\n        }\r\n\r\n       return await callback(latitude, longitude , ...args);\r\n    } catch (error) {\r\n        console.error(\"Error fetching location:\", error);\r\n    }\r\n};\r\n\r\nexport default  withLocation"],"names":["CustomTextField","props","_jsx","TextField","variant","size","fullWidth","sx","color","height","borderColor","InputLabelProps","shrink","CustomBox","_ref","children","Box","width","mx","my","px","py","pb","backgroundColor","_ref2","_selectedOperator$cus3","_ref3","_total$tabs$activeTab","walletCall","navigate","useNavigate","serviceId","useParams","loading","setLoading","useState","operatorList","setOperatorList","error","setError","selectedOperator","setSelectedOperator","formValues","setFormValues","formErrors","setFormErrors","billDetails","setBillDetails","billAmount","setBillAmount","billFetched","setBillFetched","pin","setPin","refId","setRefId","openTipModel","setOpenTipModel","serviceName","setServicename","isFetchingRef","useRef","isMobileRecharge","setIsMobileRecharge","isDth","setIsDth","fetchRequired","setFetchRequried","circle","setCircle","selectedCircle","setSelectedCircle","planDetails","setplanDetails","planPopupOpen","setPlanPopupOpen","useEffect","async","_res$data","res","getBBPSOperator","_res$data2","_res$data2$data","_res$data3","_res$data3$data","_res$data4","_res$data4$data","_res$data4$data$servi","_res$data5","_res$data5$data","_res$data5$data$servi","data","Operator","service","service_name","fetchOperators","handleReset","fetchCircle","_res$data6","getMobileRechargeCircle","handleFetchMobilePlan","withLocation","latitude","longitude","current","body","opretorId","operatorid","state","_res$data7","_res$data9","_res$data10","getMobileRechargePlan","_res$data8","statusCode","toastMessage","message","_error$data","_error$data$data","_error$data2","_error$data2$data","handlePayBill","billPaymentData","billerId","telecomCircle","inputParameters","String","slice","amount","enquiryReferenceId","tpin","circleCode","_res$data20","_res$data22","_res$data23","payBBPSBill","_res$data21","_res$data21$data","tipPopClose","concat","id","isFormValid","_selectedOperator$cus2","customerParams","every","param","desc","value","name","regex","RegExp","test","length","minLength","tabs","plans","Object","keys","offerPlan","total","activeTab","setActiveTab","_jsxs","_Fragment","background","backgroundSize","minHeight","padding","p","maxWidth","m","position","zIndex","Loader","Alert","severity","mb","display","justifyContent","alignItems","gap","icon","src","genrateUrl","alt","style","objectFit","onError","e","currentTarget","Typography","gutterBottom","mt","fontSize","Divider","Grid","container","spacing","item","xs","Autocomplete","options","getOptionLabel","option","disabled","onChange","newVal","requiredFetch","fetchRequirement","renderOption","_createElement","key","_id","component","columnGap","logo_url","renderInput","params","label","top","sm","map","type","inputProps","maxLength","inputMode","inputType","handleInputChange","paramName","_selectedOperator$cus","find","prev","target","helperText","right","cursor","opacity","onClick","Button","_res$data15","_res$data15$data","_res$data16","cloneObj","param2","transactionAmount","getBBPSBill","bill","billerResponse","_res$data17","_res$data18","_res$data19","_res$data19$data","handleFetchBillBackground","textTransform","fontWeight","_res$data11","_res$data11$data","_res$data14","_res$data14$data","_res$data12","_res$data13","BillAmount","Array","isArray","CustomerParamsDetails","AdditionalDetails","idx","border","borderRadius","boxShadow","Name","Value","CustomerName","Dialog","open","onClose","PaperProps","backdropFilter","overflow","IconButton","CloseIcon","Tabs","handleTabChange","_","scrollButtons","allowScrollButtonsMobile","orientation","tab","index","Tab","flexDirection","overflowY","overflowX","plan","Card","elevation","payMobileRecharge","rs","transition","transform","CardContent","validity","DialogTitle","textAlign","DialogContent","autoComplete","InputProps","startAdornment","InputAdornment","LockIcon","DialogActions","alert","url","baseUrlImage","getLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","code","PERMISSION_DENIED","enableHighAccuracy","timeout","maximumAge","Error","arguments","undefined","toast","success","callback","_len","args","_key","console"],"sourceRoot":""}