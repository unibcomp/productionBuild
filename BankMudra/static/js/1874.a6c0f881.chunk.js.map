{"version":3,"file":"static/js/1874.a6c0f881.chunk.js","mappings":"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","sources":["pages/cashbackPayout/index.jsx","utils/getLocation.js","utils/toastMessage.js","utils/withLocation.js"],"sourcesContent":["import { useCashBackProvider } from \"./CashBackProvider\";\r\nimport Loader from \"../../common/loader/Loader\";\r\nimport React, { useRef, useState, useEffect, useMemo } from \"react\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n  IconButton,\r\n  Button,\r\n  Avatar,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormHelperText,\r\n  FormControl,\r\n  Select,\r\n  CircularProgress,\r\n  TextField,\r\n  Autocomplete,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Pagination,\r\n  Stack,\r\n  InputAdornment,\r\n} from \"@mui/material\";\r\nimport ArrowBackIosNewIcon from \"@mui/icons-material/ArrowBackIosNew\";\r\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { genrateUrl } from \"../../utils/genrateUrl\";\r\nimport {cashbackSettlementReport, cloudImage, getDMtcharges, getAllBank, bankListForCashbackSettlement, cashbackSettlement, cashbackSettlementEnquiry } from \"../../api/login/Login\";\r\nimport { Formik, Form, Field, useField, useFormikContext } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport CurrencyRupeeIcon from '@mui/icons-material/CurrencyRupee';\r\nimport { cssNumber } from \"jquery\";\r\nimport withLocation from \"../../utils/withLocation\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport toastMessage from \"../../utils/toastMessage\";\r\n\r\n\r\nconst status = {\r\n    1 :'Pending',\r\n    2 : 'Success',\r\n    3 : 'Failed',\r\n    4 :'Refund',\r\n}\r\n\r\nconst statusColor  = {\r\n  1 : 'btn btn-warning',\r\n  2 : 'btn btn-success',\r\n  3 :'btn btn-danger',\r\n  4 :'btn btn-light',\r\n  5 :'btn btn-light'\r\n}\r\n\r\nconst BankSelect = ({ name, options, ...props }) => {\r\n  const { setFieldValue, setFieldTouched, errors, touched, values } =\r\n    useFormikContext();\r\n  const [field] = useField(name);\r\n\r\n  return (\r\n    <Autocomplete\r\n      {...props}\r\n      options={options}\r\n      getOptionLabel={(opt) => opt?.label ?? \"\"} // 🡱 show bank name\r\n      value={field.value}\r\n      isOptionEqualToValue={(o, v) => o?.value?._id === v?.value?._id}\r\n      onChange={(_, newVal) => {\r\n        setFieldValue(name, newVal); // bank object\r\n        // Auto‑fill / clear IFSC\r\n        setFieldValue(\"ifsc\", newVal?.value?.ifsc_code || \"\");\r\n        setFieldTouched(\"ifsc\", true, false);\r\n      }}\r\n      renderInput={(params) => (\r\n        <CustomTextField\r\n          {...params}\r\n          label=\"Select Bank\"\r\n          error={touched[name] && Boolean(errors[name])}\r\n          helperText={touched[name] && errors[name]}\r\n          size=\"small\"\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nconst CustomTextField = (props) => (\r\n  <TextField\r\n    variant=\"outlined\"\r\n    size=\"small\"\r\n    InputLabelProps={{\r\n      shrink: true,\r\n      //   style: { fontSize: '16px' },\r\n    }}\r\n    sx={{\r\n      \"& label.Mui-focused\": {\r\n        color: \"var(--bs-nav)\",\r\n      },\r\n      \"& .MuiOutlinedInput-root\": {\r\n        height: 40,\r\n        \"& .MuiOutlinedInput-input\": {\r\n          py: 0,\r\n        },\r\n        \"&:hover fieldset\": { borderColor: \"var(--bs-primary1)\" },\r\n        \"&.Mui-focused fieldset\": { borderColor: \"var(--bs-primary1)\" },\r\n      },\r\n    }}\r\n    \r\n    {...props}\r\n  />\r\n);\r\n\r\nconst CustomField = ({ name, label, type = \"text\", ...props }) => (\r\n  <Field name={name}>\r\n    {({ field, form }) => (\r\n      <TextField\r\n        label={label}\r\n        type={type}\r\n        size=\"small\"\r\n        fullWidth\r\n        {...field}\r\n        {...props}\r\n        error={form.touched[name] && Boolean(form.errors[name])}\r\n        helperText={form.touched[name] && form.errors[name]}\r\n        InputLabelProps={{ shrink: true }}\r\n        sx={{\r\n          \"& .MuiOutlinedInput-root\": {\r\n            height: 40,\r\n            \"& .MuiOutlinedInput-input\": { py: 0 },\r\n            \"&:hover fieldset\": { borderColor: \"var(--bs-primary1)\" },\r\n            \"&.Mui-focused fieldset\": { borderColor: \"var(--bs-primary1)\" },\r\n          },\r\n        }}\r\n      />\r\n    )}\r\n  </Field>\r\n);\r\n\r\nconst CustomBox = ({ children }) => (\r\n  <Box\r\n    sx={{\r\n      width: \"100%\",\r\n      //   maxWidth: 800,\r\n      mx: \"auto\",\r\n      //   mt: 5,\r\n      my: 1,\r\n      py: 3,\r\n      px: 3,\r\n\r\n      //   bgcolor: '#F8F9FA',\r\n      bgcolor: \"white\",\r\n      borderRadius: 1,\r\n      boxShadow: 0,\r\n    }}\r\n  >\r\n    {children}\r\n  </Box>\r\n);\r\n\r\nconst validationSchema = Yup.object({\r\n  mobile: Yup.string()\r\n    .matches(/^[6-9]\\d{9}$/, \"Invalid mobile number\")\r\n    .required(\"Mobile number is required\"),\r\n\r\n  accountHolder: Yup.string().required(\"Account holder name is required\"),\r\n\r\n  accountNumber: Yup.string()\r\n    .matches(/^\\d{9,18}$/, \"Invalid account number\")\r\n    .required(\"Account number is required\"),\r\n\r\n  confirmAccountNumber: Yup.string()\r\n    .oneOf([Yup.ref(\"accountNumber\")], \"Account numbers must match\")\r\n    .required(\"Confirm account number is required\"),\r\n\r\n  // NEW: bank must be chosen (null when nothing selected)\r\n  bank: Yup.object().nullable().required(\"Select a bank\"),\r\n\r\n  ifsc: Yup.string()\r\n    .matches(/^[A-Z]{4}0[A-Z0-9]{6}$/, \"Invalid IFSC code\")\r\n    .required(\"IFSC code is required\"),\r\n\r\n  profile: Yup.mixed().required(\"Bank proof is required\"),\r\n});\r\n\r\nconst AddBankAcount = () => {\r\n  const fileInputRef = useRef();\r\n  const allState = [];\r\n  const [bankList, setBankList] = useState([]);\r\n  const [verficationCharges, setVerificationCharges] = useState(\"\");\r\n  const getVerificationCharges = async () => {\r\n    try {\r\n      let res = await getDMtcharges();\r\n      setVerificationCharges(res?.data?.data?.bankVerificationCharge);\r\n    } catch (error) {}\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const res = await getAllBank(); // <--  [{ bank_name, ifsc_code, … }]\r\n        const mapped = res?.data?.data?.map((b) => ({\r\n          label: b.bank_name,\r\n          value: b, // keep the whole record in `value`\r\n        }));\r\n        setBankList(mapped);\r\n      } catch (err) {\r\n        console.error(\"Error fetching bank list:\", err);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        mobile: \"\",\r\n        accountHolder: \"\",\r\n        accountNumber: \"\",\r\n        confirmAccountNumber: \"\",\r\n        bank: null, // <-- NEW\r\n        ifsc: \"\",\r\n        profile: null,\r\n      }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values) => {\r\n        console.log(\"Form Data:\", values);\r\n        // Submit your form\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        setFieldValue,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n      }) => {\r\n        const handleProfileUpload = async (e) => {\r\n          const file = e.target.files[0];\r\n          if (!file) return;\r\n          const allowedTypes = [\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/webp\",\r\n          ];\r\n          if (!allowedTypes.includes(file.type)) {\r\n            alert(\"Only image files are allowed (jpg, jpeg, png, webp).\");\r\n            return;\r\n          }\r\n\r\n          const img = new FormData();\r\n          img.append(\"image\", file);\r\n\r\n          try {\r\n            const res = await cloudImage(img);\r\n            if (res?.data?.statusCode === \"200\") {\r\n              setFieldValue(\"profile\", res.data?.data?.url);\r\n            } else {\r\n              setFieldValue(\"profile\", null);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Image upload failed:\", error);\r\n            setFieldValue(\"profile\", null);\r\n          }\r\n        };\r\n        console.log(values, \"values\");\r\n        console.log(errors, \"errors\");\r\n        return (\r\n          <Form>\r\n            <CustomBox>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                <IconButton>\r\n                  <ArrowBackIosNewIcon />\r\n                </IconButton>\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  color=\"var(--bs-nav)\"\r\n                  fontWeight=\"bold\"\r\n                  fontSize={18}\r\n                >\r\n                  Add New Bank Account\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Box maxWidth={\"800px\"} m={\"auto\"} mt={3}>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <Field\r\n                      name=\"mobile\"\r\n                      label=\"Mobile Number\"\r\n                      fullWidth\r\n                      as={CustomTextField}\r\n                      error={touched.mobile && !!errors.mobile}\r\n                      helperText={touched.mobile && errors.mobile}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6}>\r\n                    <Field\r\n                      name=\"accountHolder\"\r\n                      label=\"A/C Holder Name\"\r\n                      fullWidth\r\n                      as={CustomTextField}\r\n                      error={touched.accountHolder && !!errors.accountHolder}\r\n                      helperText={touched.accountHolder && errors.accountHolder}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6}>\r\n                    <Field\r\n                      name=\"accountNumber\"\r\n                      label=\"Account Number\"\r\n                      fullWidth\r\n                      as={CustomTextField}\r\n                      error={touched.accountNumber && !!errors.accountNumber}\r\n                      helperText={touched.accountNumber && errors.accountNumber}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6}>\r\n                    <Field\r\n                      name=\"confirmAccountNumber\"\r\n                      label=\"Confirm Account Number\"\r\n                      fullWidth\r\n                      as={CustomTextField}\r\n                      error={\r\n                        touched.confirmAccountNumber &&\r\n                        !!errors.confirmAccountNumber\r\n                      }\r\n                      helperText={\r\n                        touched.confirmAccountNumber &&\r\n                        errors.confirmAccountNumber\r\n                      }\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6}>\r\n                    <Field\r\n                      name=\"bank\"\r\n                      component={BankSelect}\r\n                      options={bankList}\r\n                      fullWidth\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6}>\r\n                    <Field\r\n                      name=\"ifsc\"\r\n                      label=\"IFSC Code\"\r\n                      fullWidth\r\n                      as={CustomTextField}\r\n                      error={touched.ifsc && !!errors.ifsc}\r\n                      helperText={touched.ifsc && errors.ifsc}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={12} lg={6}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      startIcon={<CloudUploadIcon />}\r\n                      onClick={() => {\r\n                        fileInputRef.current.value = null;\r\n                        fileInputRef.current.click();\r\n                      }}\r\n                      sx={{\r\n                        textTransform: \"none\",\r\n                        justifyContent: \"flex-start\",\r\n                        padding: \"8px 16px\",\r\n                        borderColor: errors.profile ? \"error.main\" : \"grey.400\",\r\n                        color: \"var(--bs-nav)\",\r\n                      }}\r\n                    >\r\n                      Choose File\r\n                    </Button>\r\n\r\n                    <input\r\n                      ref={fileInputRef}\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      hidden\r\n                      onChange={handleProfileUpload}\r\n                    />\r\n\r\n                    {values.profile && (\r\n                      <Box\r\n                        sx={{\r\n                          position: \"relative\",\r\n                          display: \"inline-block\",\r\n                          mt: 2,\r\n                        }}\r\n                      >\r\n                        <Avatar\r\n                          src={genrateUrl(values.profile)}\r\n                          alt=\"Preview\"\r\n                          variant=\"rounded\"\r\n                          sx={{ width: 80, height: 80 }}\r\n                        />\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => setFieldValue(\"profile\", null)}\r\n                          sx={{\r\n                            position: \"absolute\",\r\n                            top: -10,\r\n                            right: -10,\r\n                            bgcolor: \"white\",\r\n                            border: \"1px solid #ccc\",\r\n                            boxShadow: 1,\r\n                          }}\r\n                        >\r\n                          <CloseIcon sx={{ fontSize: \"10px\" }} />\r\n                        </IconButton>\r\n                      </Box>\r\n                    )}\r\n\r\n                    {touched.profile && errors.profile && (\r\n                      <Typography\r\n                        color=\"error\"\r\n                        variant=\"caption\"\r\n                        sx={{ mt: 0.5, display: \"block\" }}\r\n                      >\r\n                        {errors.profile}\r\n                      </Typography>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Typography\r\n                  color=\"var(--bs-nav)\"\r\n                  sx={{ mt: 2 }}\r\n                  fontWeight={500}\r\n                >\r\n                  Account Verification Charge: ₹ {0}\r\n                </Typography>\r\n\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    gap: 2,\r\n                    mt: 2,\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                >\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"info\"\r\n                    sx={{\r\n                      borderColor: \"var(--bs-primary1)\",\r\n                      color: \"var(--bs-primary1)\",\r\n                    }}\r\n                  >\r\n                    <CircularProgress size={24} color=\"inherit\" />\r\n                    {\"Account Verification\"}\r\n                  </Button>\r\n\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"info\"\r\n                    sx={{\r\n                      borderColor: \"var(--bs-primary1)\",\r\n                      color: \"var(--bs-primary1)\",\r\n                    }}\r\n                    type=\"submit\"\r\n                  >\r\n                    <CircularProgress size={24} color=\"inherit\" />\r\n                    {\"Add Beneficiary\"}\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            </CustomBox>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst SettlementOld = () => {\r\n  /* ---------- wallet + dialog state ---------- */\r\n  const [balance, setBalance] = useState(6600); // ₹ balance (mock)\r\n  const [open, setOpen] = useState(false); // transfer dialog\r\n  const [amount, setAmount] = useState(\"\"); // text field value\r\n  const [error, setError] = useState(\"\"); // validation message\r\n\r\n  /* ---------- transfer history ---------- */\r\n  const [transfers, setTransfers] = useState([]); // [{id, amount, date, status}]\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  /* ---------- helpers ---------- */\r\n  const pagedTransfers = useMemo(() => {\r\n    const start = page * rowsPerPage;\r\n    return transfers.slice(start, start + rowsPerPage);\r\n  }, [transfers, page, rowsPerPage]);\r\n\r\n  const validate = (val) => {\r\n    if (val === \"\") return \"Amount is required\";\r\n    const n = Number(val);\r\n    if (isNaN(n) || n <= 0) return \"Enter a positive number\";\r\n    if (n > balance) return \"Cannot exceed wallet balance\";\r\n    if (n > 100000) return \"Maximum single transfer is ₹1 lakh\";\r\n    return \"\";\r\n  };\r\n\r\n  /* ---------- event handlers ---------- */\r\n  const handleOpen = () => {\r\n    setAmount(\"\");\r\n    setError(\"\");\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const err = validate(amount);\r\n    if (err) {\r\n      setError(err);\r\n      return;\r\n    }\r\n    const amt = Number(amount);\r\n    // 1. Call your API here (POST /transfer { amount: amt })\r\n    // 2. On success, update UI\r\n    setBalance((b) => b - amt);\r\n    setTransfers((prev) => [\r\n      {\r\n        id: `TRF-${Date.now()}`, // unique id\r\n        amount: amt,\r\n        date: new Date().toLocaleDateString(),\r\n        status: \"SUCCESS\",\r\n      },\r\n      ...prev,\r\n    ]);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Cashback Settlement\r\n      </Typography>\r\n\r\n      {/* Wallet balance + button */}\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n          flexWrap=\"wrap\"\r\n          gap={2}\r\n        >\r\n          <Box>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Cashback Wallet Balance\r\n            </Typography>\r\n            <Typography variant=\"h5\" fontWeight={700}>\r\n              ₹ {balance.toLocaleString(\"en-IN\")}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Button variant=\"contained\" size=\"large\" onClick={handleOpen}>\r\n            Transfer to Bank\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Transfer history */}\r\n      <Paper>\r\n        <TableContainer>\r\n          <Table size=\"small\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Txn ID</TableCell>\r\n                <TableCell align=\"right\">Amount (₹)</TableCell>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell>Status</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {pagedTransfers.map((row) => (\r\n                <TableRow key={row.id}>\r\n                  <TableCell>{row.id}</TableCell>\r\n                  <TableCell align=\"right\">{row.amount}</TableCell>\r\n                  <TableCell>{row.date}</TableCell>\r\n                  <TableCell>{row.status}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n\r\n              {pagedTransfers.length === 0 && (\r\n                <TableRow>\r\n                  <TableCell colSpan={4} align=\"center\">\r\n                    No transfers yet\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <TablePagination\r\n          component=\"div\"\r\n          page={page}\r\n          count={transfers.length}\r\n          onPageChange={(_, p) => setPage(p)}\r\n          rowsPerPage={rowsPerPage}\r\n          onRowsPerPageChange={(e) => {\r\n            setRowsPerPage(parseInt(e.target.value, 10));\r\n            setPage(0);\r\n          }}\r\n        />\r\n      </Paper>\r\n\r\n      {/* Transfer dialog */}\r\n      <Dialog\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        maxWidth=\"xs\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Transfer to Bank</DialogTitle>\r\n\r\n        <DialogContent dividers>\r\n          <TextField\r\n            label=\"Amount (₹)\"\r\n            fullWidth\r\n            value={amount}\r\n            onChange={(e) => {\r\n              setAmount(e.target.value);\r\n              if (error) setError(validate(e.target.value));\r\n            }}\r\n            type=\"number\"\r\n            inputProps={{ min: 1 }}\r\n            error={Boolean(error)}\r\n            helperText={error}\r\n          />\r\n          {/* Extra inputs (bank, remarks...) can go here */}\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n          <Button variant=\"contained\" onClick={handleSubmit}>\r\n            Transfer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SettlementPopup = ({setResetKey}) => {\r\n  const { popupOpen, setpopupOpen , walletData , setLoader ,walletCall } = useCashBackProvider();\r\n  const [cashbackBankList , setCashBackBankList] = useState([])\r\n  const [step, setStep] = useState(1); \r\n  const [values, setValues] = useState({\r\n    bank: null,\r\n    amount: \"\",\r\n    tpin: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validateStep1 = () => {\r\n    const next = {};\r\n    if (!values.bank) next.bank = \"Select a bank\";\r\n\r\n    const amt = Number(values.amount);\r\n    if (!values.amount) next.amount = \"Enter an amount\";\r\n    else if (Number.isNaN(amt) || amt <= 99) next.amount = \"Minimum Amount is 100.\";\r\n    else if (amt > (walletData?.cashback_wallet || 0))\r\n      next.amount = \"Amount exceeds wallet balance\";\r\n\r\n    setErrors(next);\r\n    return Object.keys(next).length === 0;\r\n  };\r\n\r\n  const validateStep2 = () => {\r\n    if (!values.tpin) return \"Enter TPIN\";\r\n    if (!/^\\d{4}$/.test(values.tpin)) return \"TPIN must be 4 digits\";\r\n    return \"\";\r\n  };\r\n\r\n  const handleChange = (field) => (e, newValue) => {\r\n    const value = field === \"bank\" ? newValue : e.target.value;\r\n    setValues((p) => ({ ...p, [field]: value }));\r\n    if (errors[field]) setErrors((e) => ({ ...e, [field]: \"\" }));\r\n  };\r\n\r\n\r\n    /* ---------- SUBMITS ---------- */\r\n    const handleNext = () => {\r\n      if (validateStep1()) setStep(2);\r\n    };\r\n  \r\n    const handleConfirm =  withLocation(async(latitude ,longitude ) => {\r\n      const err = validateStep2();\r\n      if (err) {\r\n        setErrors((e) => ({ ...e, tpin: err }));\r\n        return;\r\n      }\r\n   \r\n   \r\n       let body = {\r\n        bank_id : values?.bank?._id,\r\n        latlong :`${latitude},${longitude}`,\r\n        txnMode :'imps',\r\n        tpin :values?.tpin,\r\n        amount : values?.amount\r\n\r\n       }\r\n     \r\n       setLoader(true) \r\n        try {\r\n          let res = await cashbackSettlement(body)\r\n          toastMessage(res?.data?.error , res?.data?.message)\r\n          if(res?.data?.statusCode === 200)\r\n            {\r\n             setpopupOpen(false);\r\n             setResetKey((pre)=>!pre)\r\n             setStep(1);                    \r\n             setValues({ bank: null, amount: \"\", tpin: \"\" });\r\n             walletCall()\r\n            }\r\n           if(res?.data?.statusCode === 405)\r\n           {\r\n            setValues((pre)=>({...pre , tpin:''}))\r\n            // toastMessage(res?.data?.error , res?.data?.message)\r\n            return\r\n           }\r\n\r\n          //  // remove this block after this \r\n          //  toastMessage(false , 'Fund Transfer Succssfully.')\r\n          //  setpopupOpen(false);\r\n          //  setResetKey((pre)=>!pre)\r\n          //  setStep(1);                    \r\n          //  setValues({ bank: null, amount: \"\", tpin: \"\" });\r\n          //  walletCall()\r\n\r\n\r\n         \r\n        } catch (error) {\r\n          \r\n        } finally {\r\n          setLoader(false) \r\n        }\r\n   \r\n    });\r\n   \r\n\r\n    // const closeAll = () => {\r\n    //   setpopupOpen(false);\r\n    //   setStep(1);\r\n    //   setValues({ bank: null, amount: \"\", tpin: \"\" });\r\n    //   setErrors({});\r\n    // };\r\n   \r\n\r\n \r\n\r\n\r\n    useEffect(() => {\r\n      (async () => {\r\n        try {\r\n          const res = await bankListForCashbackSettlement();\r\n          setCashBackBankList(res?.data?.data || [])\r\n    \r\n        } catch (err) {\r\n          console.error('Bank list fetch failed:', err);\r\n        }\r\n      })();          \r\n    }, []);\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        open={popupOpen}\r\n        onClose={() => setpopupOpen(false)}\r\n        PaperProps={{\r\n          sx: () => ({\r\n            borderRadius: 4,\r\n            paddingY: 2,\r\n            backdropFilter: \"blur(10px)\",\r\n            background: \"white\",\r\n            boxShadow: \"0 8px 32px rgba(0, 0, 0, 0.2)\",\r\n            width: \"100%\",\r\n            maxWidth: 450,\r\n            //  overflow: tabs?.length === 0 ? 'hidden' : 'auto',\r\n          }),\r\n        }}\r\n      >\r\n        <AnimatePresence mode=\"wait\">\r\n\r\n      \r\n        {step ===1 ? \r\n      \r\n      <motion.div\r\n      key=\"step1\"\r\n      initial={{ opacity: 0, x: -30 }}\r\n      animate={{ opacity: 1, x: 0 }}\r\n      exit={{ opacity: 0, x: 30 }}\r\n      transition={{ duration: 0.3 }}\r\n    >\r\n\r\n   \r\n     \r\n        <DialogTitle\r\n          sx={{\r\n            color: \"var(--bs-primary2)\",\r\n            fontWeight: 600,\r\n            textAlign: \"center\",\r\n            fontSize: \"1.0rem\",\r\n          }}\r\n        >\r\n          Transfer Money into Bank Account<br/>\r\n          Your Cashback Wallet Balance is : {walletData?.cashback_wallet}\r\n        </DialogTitle>\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          flexDirection={\"column\"}\r\n          mb={2}\r\n          gap={1}\r\n          sx={{px:2}}\r\n        >\r\n          <Box sx={{ maxWidth: 380, width: \"100%\", mb: 2 }}>\r\n            <Autocomplete\r\n              options={cashbackBankList}\r\n              getOptionLabel={(option) => option?.bank_name || ''}\r\n            \r\n              value={values.bank}\r\n              onChange={handleChange(\"bank\")}\r\n              size=\"small\"\r\n            \r\n              renderOption={(props, option) => (\r\n                <li {...props}>\r\n                  <Box sx={{ fontSize: \"13px\", color: \"var(--bs-nav)\" }}>\r\n                    {option.bank_name}\r\n                  </Box>\r\n                </li>\r\n              )}\r\n              renderInput={(params) => (\r\n                <CustomTextField\r\n                  {...params}\r\n                  label=\"Select Bank\"\r\n                  error={Boolean(errors.bank)}\r\n              helperText={errors.bank}\r\n                  InputLabelProps={{\r\n                    sx: {\r\n                      \"&.MuiInputLabel-root:not(.MuiInputLabel-shrink)\": {\r\n                        top: \"-3px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                \r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n          {values?.bank?.bank_account_number && \r\n          <>\r\n          <Box sx={{ maxWidth: 380, width:'100%' ,mb:2 }} >\r\n          \r\n                \r\n          <CustomTextField\r\n          label=\"Account Holder Name\"\r\n          name='account holdernamer'\r\n          type=\"text\"\r\n          disabled={true}\r\n          value={values?.bank?.bank_account_name || ''}\r\n          \r\n     \r\n          \r\n          fullWidth\r\n          />\r\n          </Box>\r\n          <Box sx={{ maxWidth: 380, width:'100%' ,mb:2 }} >\r\n          \r\n                \r\n          <CustomTextField\r\n          label=\"IFSC code\"\r\n          name='IFSC code'\r\n          type=\"text\"\r\n          disabled={true}\r\n          value={values?.bank?.bank_ifsc || ''}\r\n          \r\n     \r\n          \r\n          fullWidth\r\n          />\r\n          </Box>\r\n           <Box sx={{ maxWidth: 380, width:'100%' ,mb:2 }} >\r\n          \r\n                \r\n           <CustomTextField\r\n           label=\"Account Number\"\r\n           name='account number'\r\n           type=\"number\"\r\n           disabled={true}\r\n           value={values?.bank?.bank_account_number || ''}\r\n           \r\n      \r\n           \r\n           fullWidth\r\n           />\r\n           </Box>\r\n           </>\r\n          }\r\n            <Box sx={{ maxWidth: 380, width:'100%' }} >\r\n          \r\n                \r\n          <CustomTextField\r\n          label=\"Amount\"\r\n          name='amt'\r\n          type=\"number\"\r\n          placeholder=\"Enter Amount\"\r\n          value={values.amount}\r\n          onChange={handleChange(\"amount\")}\r\n          error={Boolean(errors.amount)}\r\n          helperText={errors.amount}\r\n          autoComplete=\"off\"\r\n          inputProps={{ inputMode: 'numeric', maxLength: 10 }}\r\n          InputProps={{\r\n          startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n          <CurrencyRupeeIcon  />\r\n          </InputAdornment>\r\n          ),\r\n          }}\r\n          \r\n          fullWidth\r\n          />\r\n          </Box>\r\n           \r\n        </Box>\r\n            <DialogActions sx={{ justifyContent: 'center', mt: 2, columnGap:2  }}>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              width: '100%',\r\n              maxWidth: 380,\r\n              justifyContent: 'space-between',\r\n             \r\n            }}\r\n          >\r\n            <Box>\r\n              <Button\r\n                onClick={()=>setpopupOpen(false)}\r\n                color=\"error\"\r\n                variant=\"outlined\"\r\n                sx={{\r\n                  borderRadius: 2,\r\n                  px: 4,\r\n                  width: '150px',\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n        \r\n            <Box>\r\n              <Button\r\n                \r\n                onClick={handleNext}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                sx={{\r\n                  backgroundColor: 'var(--bs-primary2)',\r\n                  borderRadius: 2,\r\n                  px: 4,\r\n                  width: '150px',\r\n                }}\r\n              >\r\n                Continue\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </DialogActions>\r\n        </motion.div>  :\r\n      \r\n          <motion.div\r\n      key=\"step2\"\r\n      initial={{ opacity: 0, x: 30 }}\r\n      animate={{ opacity: 1, x: 0 }}\r\n      exit={{ opacity: 0, x: -30 }}\r\n      transition={{ duration: 0.3 }}\r\n    >\r\n\r\n  \r\n          <DialogTitle\r\n          sx={{\r\n            color: \"var(--bs-primary1)\",\r\n            fontWeight: 600,\r\n            textAlign: \"center\",\r\n            fontSize: \"1.3rem\",\r\n          }}\r\n        >\r\n           Confirm Transfer\r\n        </DialogTitle>\r\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" gap={3} px={2} pb={2}>\r\n            <Typography fontSize=\"0.95rem\" textAlign=\"center\">\r\n              Are you sure you want to transfer&nbsp;\r\n              <strong>₹{values.amount}</strong> to&nbsp;\r\n              <p>\r\n\r\n             \r\n              <strong>{values?.bank?.bank_name}</strong> &nbsp;\r\n              <strong>{values?.bank?.bank_account_number}</strong> </p>\r\n            </Typography>\r\n            <Box sx={{ maxWidth: 380, width:'100%' }}>\r\n          \r\n             \r\n                            <CustomTextField\r\n                label=\"TPIN\"\r\n                type=\"password\"\r\n                name='tpin'\r\n                placeholder=\"Enter TPin\"\r\n                value={values.tpin}\r\n                onChange={handleChange(\"tpin\")}\r\n                error={Boolean(errors.tpin)}\r\n                helperText={errors.tpin}\r\n                autoComplete=\"new-password\"\r\n                inputProps={{ inputMode: 'numeric', maxLength: 4 }}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <LockIcon  />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                // sx={{ mt: 2 }}\r\n                fullWidth\r\n              />\r\n                </Box>\r\n            </Box>\r\n            <DialogActions sx={{ justifyContent: 'center', mt: 2, columnGap:2  }}>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              width: '100%',\r\n              maxWidth: 380,\r\n              justifyContent: 'space-between',\r\n             \r\n            }}\r\n          >\r\n            <Box>\r\n              <Button\r\n                \r\n                onClick={() => {\r\n                  setStep(1)\r\n                  setValues((pre)=>({...pre , tpin :\"\"}))\r\n                }}\r\n                color=\"error\"\r\n                variant=\"outlined\"\r\n                sx={{\r\n                  borderRadius: 2,\r\n                  px: 4,\r\n                  width: '150px',\r\n                }}\r\n              >\r\n                Back\r\n              </Button>\r\n            </Box>\r\n        \r\n            <Box>\r\n              <Button\r\n                \r\n                \r\n                onClick={handleConfirm}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                sx={{\r\n                  backgroundColor: 'var(--bs-primary1)',\r\n                  borderRadius: 2,\r\n                  px: 4,\r\n                  width: '150px',\r\n                }}\r\n              >\r\n                Confirm\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </DialogActions>\r\n        </motion.div>\r\n      }\r\n        </AnimatePresence>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Settlement = () => {\r\n  const today = new Date().toISOString().split('T')[0]; \r\n  const { popupOpen, setpopupOpen , loader , setLoader} = useCashBackProvider();\r\n \r\n  const [page, setPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [resetKey , setResetKey] = useState(false)\r\n  const [totalData , setTotalData] = useState(0)\r\n    const [data , setData] = useState([])\r\n\r\n           const [filters, setFilters] = useState({\r\n              startDate: today,\r\n              endDate: today,\r\n              status :\"\",\r\n              search :\"\"\r\n          \r\n            });\r\n\r\n            const handleChangePage = (_ , value) => {\r\n              setPage(value);\r\n            };\r\n            const handleChangeRowsPerPage = (event) => {\r\n              setRowsPerPage(Number(event.target.value));\r\n              setPage(1); // reset to first page when rowsPerPage changes\r\n            };\r\n  \r\n            const handleChange = (e) => {\r\n              const { name, value } = e.target;\r\n              setFilters((prev) => ({\r\n                ...prev,\r\n                [name]: value\r\n              }));\r\n            };\r\n\r\n            const handleSubmit = () => {\r\n     \r\n              setResetKey((pre)=>!pre)\r\n              // you can pass `filters` to your API or logic here\r\n            };\r\n         \r\n            const handleReset = () => {\r\n              setFilters({\r\n                startDate: '',\r\n                endDate: '',\r\n                status :'',\r\n                search :\"\",\r\n              \r\n              });\r\n          \r\n              setPage(1)\r\n              setRowsPerPage(10)\r\n              setResetKey((pre)=>!pre)\r\n            };\r\n\r\n     const getList = async()=> {\r\n            let body = {\r\n             page : page,\r\n             count : rowsPerPage,\r\n             start_date : filters.startDate,\r\n             end_date : filters.endDate,\r\n             status : filters.status,\r\n             search : filters.search\r\n            }\r\n         try {\r\n            let res = await cashbackSettlementReport(body) \r\n            if(res?.data?.statusCode === 200)\r\n            {\r\n             setData(res?.data?.data?.trans)\r\n             setTotalData(res?.data?.data?.total)\r\n            }\r\n            else {\r\n             setData([])\r\n             setTotalData(0)\r\n            }\r\n         \r\n         } catch (error) {\r\n             \r\n         }\r\n     }\r\n     \r\n     useEffect(()=>{\r\n         getList()\r\n     },[resetKey , page , rowsPerPage])\r\n\r\n\r\n     const statusEnquiry = async(id)=> {\r\n      setLoader(true)\r\n         try {\r\n          let res = await cashbackSettlementEnquiry(id)\r\n      \r\n          setResetKey((pre)=>!pre)\r\n          toastMessage(res?.data?.error , res?.data?.message)\r\n         } catch (error) {\r\n          \r\n         } finally{\r\n          setLoader(false)\r\n         }\r\n     }\r\n     \r\n     const totalPages = Math.ceil(totalData / rowsPerPage);       \r\n  return (\r\n    <>\r\n    \r\n      <div className=\"PageHeading\">\r\n        <h1>Cashback Settlement</h1>\r\n      </div>\r\n\r\n      <CustomBox>\r\n        <Box justifyContent={\"flex-end\"} display={\"flex\"}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => setpopupOpen(true)}\r\n            sx={{\r\n              borderColor: \"var(--bs-primary1)\", // Custom colors\r\n              width: \"200px\",\r\n              backgroundColor: \"var(--bs-primary2)\", // Custom colors\r\n              color: \"white\",\r\n            }}\r\n          >\r\n            Make Settlement\r\n          </Button>\r\n        </Box>\r\n\r\n        <div className=\"card\">\r\n       <div className=\"card-header\"> {/* <span>Filter</span> */}</div>\r\n       <div className=\"card-body\">\r\n       <form>\r\n         <div className=\"form-row\" style={{ alignItems: 'end' }}>\r\n           <div className=\"form-group col-md-4\">\r\n             <label>Start Date</label>\r\n             <input\r\n               type=\"date\"\r\n               name=\"startDate\"\r\n               className=\"form-control\"\r\n               value={filters.startDate}\r\n               onChange={handleChange}\r\n               max={today}\r\n             />\r\n           </div>\r\n           <div className=\"form-group col-md-4\">\r\n             <label>End Date</label>\r\n             <input\r\n               type=\"date\"\r\n               name=\"endDate\"\r\n               className=\"form-control\"\r\n               value={filters.endDate}\r\n               onChange={handleChange}\r\n               max={today}\r\n             />\r\n           </div>\r\n\r\n           <div className=\"form-group col-md-4\">\r\n           <label>Status</label>\r\n             <FormControl\r\n                              fullWidth\r\n                             \r\n                              size=\"small\"\r\n                            >\r\n\r\n                           \r\n  <Select\r\n                   \r\n                    value={filters?.status ||''}\r\n                    name =\"status\"\r\n                    onChange={handleChange}\r\n                    \r\n                    displayEmpty\r\n                    \r\n                   \r\n                    sx={{\r\n                     \r\n                      color: \"rgba(0, 0, 0, 0.6)\", \r\n                      fontSize: \"14px\", \r\n                      \"& .MuiOutlinedInput-notchedOutline\": {\r\n                        borderColor: \"grey.400\",\r\n                        \r\n                      },\r\n                     \r\n                      \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n                        borderColor: \"var(--bs-primary1)\",\r\n                      },\r\n                      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n                        borderColor: \"var(--bs-primary1)\",\r\n                      },\r\n                    \r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"\" disabled   sx={{\r\n                       fontSize: \"14px\",\r\n                       color: \"var(--bs-nav)\",\r\n                       px: 2,\r\n                       \r\n                     }}>\r\n                      Select Status \r\n                    </MenuItem>\r\n                    {Object?.entries(status)?.map(([key , value ])=>\r\n                     <MenuItem\r\n                                            \r\n                     value={key}\r\n                     sx={{\r\n                       fontSize: \"14px\",\r\n                       color: \"var(--bs-nav)\",\r\n                       px: 2,\r\n                     \r\n                     }}\r\n                   >\r\n                     {value}\r\n                   </MenuItem>)}\r\n                    \r\n                   \r\n                  </Select>\r\n                  </FormControl>\r\n           </div>\r\n           <div className=\"form-group col-md-4\">\r\n             <label>Txn Id / Account Number / Mobile No</label>\r\n             <input\r\n               type=\"text\"\r\n               name=\"search\"\r\n               className=\"form-control\"\r\n               value={filters.search}\r\n               onChange={handleChange}\r\n               placeholder=\"Txn Id / Account Number / Mobile No\"\r\n             />\r\n           </div>\r\n        \r\n           <div className=\"form-group col-md-12 col-lg-12\">\r\n             \r\n             <div>\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"btn btn-secondary mr-3\"\r\n                 onClick={handleSubmit}\r\n               >\r\n                 Search\r\n               </button>\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"btn btn-light\"\r\n                 onClick={handleReset}\r\n               >\r\n                 Reset\r\n               </button>\r\n             </div>\r\n           </div>\r\n         </div>\r\n       </form>\r\n       </div>\r\n     </div>\r\n\r\n        <Box sx={{ my: 2 }}>\r\n          <TableContainer component={Box} elevation={3}>\r\n            <Table>\r\n              <TableHead sx={{ backgroundColor: \"#f5f5f5\" }}>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <strong>S.No.</strong>\r\n                  </TableCell>\r\n                  <TableCell style={{minWidth:'180px'}}>\r\n                    <strong> Date</strong>\r\n                  </TableCell>\r\n                  <TableCell style={{minWidth:'180px'}}>\r\n                    <strong>Transaction Id</strong>\r\n                  </TableCell>\r\n                  <TableCell style={{minWidth:'180px'}}>\r\n                    <strong>UTR Number</strong>\r\n                  </TableCell>\r\n                  <TableCell style={{minWidth:'180px'}}>\r\n                    <strong>Bank Name</strong>\r\n                  </TableCell>\r\n                  <TableCell style={{minWidth:'120px'}}>\r\n                    <strong>Account Number</strong>\r\n                  </TableCell>\r\n                    <TableCell style={{minWidth:'100px'}}>\r\n                    <strong>Opening Balance</strong>\r\n                  </TableCell>\r\n                   <TableCell style={{minWidth:'60px'}}>\r\n                    <strong>Charges</strong>\r\n                  </TableCell>\r\n                  <TableCell style={{minWidth:'100px'}}>\r\n                    <strong>Amount</strong>\r\n                  </TableCell>\r\n                    <TableCell style={{minWidth:'120px'}}>\r\n                    <strong>Closing Balance</strong>\r\n                  </TableCell>\r\n                \r\n                  {/* <TableCell><strong>Qty</strong></TableCell> */}\r\n                  {/* <TableCell><strong>Address</strong></TableCell> */}\r\n                  <TableCell style={{minWidth:'180px'}}>\r\n                    <strong>Status</strong>\r\n                  </TableCell>\r\n                  <TableCell style={{minWidth:'180px'}}>\r\n                    <strong>Enquiry</strong>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                {data?.map((item, index) => (\r\n                  <TableRow key={index} hover>\r\n                    <TableCell sx={{ color: \"var(--bs-nav)\" }}>{(index + 1) + ((page - 1) * rowsPerPage)}</TableCell>\r\n                    <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.createdAt} </TableCell>\r\n                    <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.txn_id} </TableCell>\r\n                    \r\n                    <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.utr || 'Not generated'}</TableCell>\r\n                    <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.bank_name}</TableCell>\r\n                    <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.account_number}</TableCell>\r\n                     <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.o_bal}</TableCell>\r\n                      <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.charge}</TableCell>\r\n                       <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.amount}</TableCell>\r\n                    <TableCell sx={{ color: \"var(--bs-nav)\" }}>{item?.c_bal}</TableCell>\r\n                    \r\n                    <TableCell sx={{ color: \"var(--bs-nav)\" }}>\r\n                    <button className={`btn ${statusColor[item.status]}`} style={{width:'130px'}} >{status[item?.status] || 'unknown'}</button>\r\n                    </TableCell>\r\n                    <TableCell sx={{color :'var(--bs-nav)'}} >\r\n                    <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={loader || item?.status !== 1}\r\n            onClick={() => statusEnquiry(item?._id)}\r\n            sx={{\r\n              borderColor: \"var(--bs-primary1)\", // Custom colors\r\n              width: \"150px\",\r\n              backgroundColor: \"var(--bs-primary1)\", // Custom colors\r\n              color: \"white\",\r\n            }}\r\n          >\r\n            Enquiry\r\n          </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n\r\n               {data?.length === 0 &&  <TableRow>\r\n                  <TableCell colSpan={8} align=\"center\" sx={{ color: \"gray\" }}>\r\n                    No data found\r\n                  </TableCell> \r\n                </TableRow> }\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Box>\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          mt={2}\r\n          flexWrap=\"wrap\"\r\n          gap={2}\r\n        >\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <FormControl size=\"small\" sx={{ width: \"150px\" }}>\r\n              <InputLabel>Rows per page</InputLabel>\r\n              <Select\r\n                value={rowsPerPage}\r\n                 onChange={handleChangeRowsPerPage}\r\n                label=\"Rows per page\"\r\n                sx={{\r\n                  fontSize: \"14px\",\r\n                  \"& .MuiOutlinedInput-notchedOutline\": {\r\n                    borderColor: \"#ccc\",\r\n                  },\r\n                  \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n                    borderColor: \"var(--bs-primary1)\",\r\n                  },\r\n                  \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n                    borderColor: \"var(--bs-primary1)\",\r\n                  },\r\n                }}\r\n              >\r\n                {[5, 10, 25, 50].map((num) => (\r\n                  <MenuItem key={num} value={num}>\r\n                    {num}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {/* Total Entries Count */}\r\n            <Typography\r\n              variant=\"body2\"\r\n              sx={{ fontSize: \"14px\", color: \"#555\" }}\r\n            >\r\n              Total Entries: {totalData}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Pagination\r\n            count={totalPages}\r\n            page={page}\r\n             onChange={handleChangePage}\r\n            // color=\"primary\"\r\n            shape=\"rounded\"\r\n            showFirstButton\r\n            showLastButton\r\n            sx={{\r\n              \"& .MuiPaginationItem-root\": {\r\n                color: \"var(--bs-primary1)\",\r\n                borderRadius: \"8px\",\r\n              },\r\n              \"& .MuiPaginationItem-root.Mui-selected\": {\r\n                backgroundColor: \"var(--bs-primary1)\",\r\n                color: \"#fff\",\r\n                fontWeight: \"bold\",\r\n                \"&:hover\": {\r\n                  backgroundColor: \"var(--bs-primary1)\",\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        </Box>\r\n      </CustomBox>\r\n\r\n      {popupOpen && <SettlementPopup setResetKey={setResetKey} />}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CashbackPayout = () => {\r\n  const { currentPage, loader } = useCashBackProvider();\r\n\r\n  return (\r\n    <>\r\n      {loader && <Loader />}\r\n\r\n      {/* {currentPage ==='' && <AddBankAcount/>} */}\r\n\r\n      {currentPage === \"\" && <Settlement />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CashbackPayout;\r\n","export const  getLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n         \r\n            resolve({\r\n              latitude: position.coords.latitude,\r\n              longitude: position.coords.longitude,\r\n            });\r\n          },\r\n          (error) => {\r\n            if (error.code === error.PERMISSION_DENIED) {\r\n              alert(\"Please Enable Location to Proceed\");\r\n            }\r\n            reject(error);\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            timeout: 10000,\r\n            maximumAge: 0\r\n          });\r\n      } else {\r\n        reject(new Error('Geolocation is not supported'));\r\n      }\r\n    });\r\n  };\r\n","import { toast } from \"react-toastify\";\r\n\r\n\r\nexport default function toastMessage(error, message = \"something went wrong\") {\r\n\r\n    error === false ? toast.success(message) : toast.error(message);\r\n    // error === false  ?  setSnackbar({ open: true, message: response?.data?.message ||, severity: 'success' }) :  setSnackbar({ open: true, message , severity: 'error' });\r\n}","import { getLocation } from \"./getLocation\";\r\n\r\nconst  withLocation = (callback) => async (...args) => { \r\n    try {\r\n        let { latitude, longitude } = await getLocation();\r\n        \r\n        if (!latitude || !longitude) {\r\n            return alert(\"Please Enable Location\");\r\n        }\r\n\r\n       return await callback(latitude, longitude , ...args);\r\n    } catch (error) {\r\n        console.error(\"Error fetching location:\", error);\r\n    }\r\n};\r\n\r\nexport default  withLocation"],"names":["status","statusColor","CustomTextField","props","_jsx","TextField","variant","size","InputLabelProps","shrink","sx","color","height","py","borderColor","CustomBox","_ref4","children","Box","width","mx","my","px","bgcolor","borderRadius","boxShadow","SettlementPopup","Yup","mobile","matches","required","accountHolder","accountNumber","confirmAccountNumber","oneOf","bank","nullable","ifsc","profile","_ref6","_values$bank2","_values$bank3","_values$bank4","_values$bank5","_values$bank6","_values$bank7","setResetKey","popupOpen","setpopupOpen","walletData","setLoader","walletCall","useCashBackProvider","cashbackBankList","setCashBackBankList","useState","step","setStep","values","setValues","amount","tpin","errors","setErrors","handleChange","field","e","newValue","value","target","p","handleConfirm","withLocation","async","latitude","longitude","_values$bank","err","test","body","bank_id","_id","latlong","concat","txnMode","_res$data5","_res$data6","_res$data7","_res$data8","res","cashbackSettlement","toastMessage","data","error","message","statusCode","pre","useEffect","_res$data9","bankListForCashbackSettlement","console","_Fragment","Dialog","open","onClose","PaperProps","paddingY","backdropFilter","background","maxWidth","AnimatePresence","mode","_jsxs","motion","div","initial","opacity","x","animate","exit","transition","duration","DialogTitle","fontWeight","textAlign","fontSize","cashback_wallet","display","justifyContent","alignItems","flexDirection","mb","gap","Autocomplete","options","getOptionLabel","option","bank_name","onChange","renderOption","renderInput","params","label","Boolean","helperText","top","bank_account_number","name","type","disabled","bank_account_name","fullWidth","bank_ifsc","placeholder","autoComplete","inputProps","inputMode","maxLength","InputProps","startAdornment","InputAdornment","position","CurrencyRupeeIcon","DialogActions","mt","columnGap","Button","onClick","handleNext","validateStep1","next","amt","Number","isNaN","Object","keys","length","backgroundColor","pb","Typography","LockIcon","Settlement","_Object$entries","today","Date","toISOString","split","loader","page","setPage","rowsPerPage","setRowsPerPage","resetKey","totalData","setTotalData","setData","filters","setFilters","startDate","endDate","search","prev","count","start_date","end_date","_res$data10","cashbackSettlementReport","_res$data11","_res$data11$data","_res$data12","_res$data12$data","trans","total","getList","totalPages","Math","ceil","className","style","max","FormControl","Select","displayEmpty","MenuItem","entries","map","_ref7","key","handleSubmit","handleReset","TableContainer","component","elevation","Table","TableHead","TableRow","TableCell","minWidth","TableBody","item","index","hover","createdAt","txn_id","utr","account_number","o_bal","charge","c_bal","_res$data13","_res$data14","cashbackSettlementEnquiry","id","statusEnquiry","colSpan","align","flexWrap","InputLabel","event","num","Pagination","handleChangePage","_","shape","showFirstButton","showLastButton","CashbackPayout","currentPage","Loader","getLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","code","PERMISSION_DENIED","alert","enableHighAccuracy","timeout","maximumAge","Error","arguments","undefined","toast","success","callback","_len","args","Array","_key"],"sourceRoot":""}