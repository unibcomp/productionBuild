{"version":3,"file":"static/js/2231.046c6baa.chunk.js","mappings":"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","sources":["components/admin/dasBoard/serviceParent/water/waterList/DeviceInfo.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  BrowserView,\r\n  MobileView,\r\n  isBrowser,\r\n  isMobile,\r\n  isTablet,\r\n  isAndroid,\r\n  isIOS,\r\n  deviceDetect,\r\n  isWindows,\r\n  isMacOs,\r\n  isChrome,\r\n  isFirefox,\r\n  isSafari,\r\n  isOpera,\r\n  isIE,\r\n  isEdge\r\n} from 'react-device-detect';\r\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\r\nimport forge from 'node-forge';\r\nimport axios from 'axios';\r\nimport { baseUrl } from '../../../../../../baseUrl';\r\n\r\n// Securely store and retrieve these keys in production\r\nconst AES_KEY = \"03ab4a43059239fd13d75987d7dfafda51467e871b87bd3847f01474116d311c\";\r\nconst AES_IV = \"3529f86c41ab1bb8b8f6d788cbb3f6f9\";\r\nconst RSA_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBBUuux5GAG/Fm9YoeGJeYr5qT6WFXga3/\\npV935e83f01KK+1E/Av6myqwYsmqRG/FuCFeMyv+mlXGIKu5fO3+X18CAwEAAQ==\\n-----END PUBLIC KEY-----\\n\";\r\nconst RSA_PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----\\nMIIBVgIBADANBgkqhkiG9w0BAQEFAASCAUAwggE8AgEAAkEFS67HkYAb8Wb1ih4Y\\nl5ivmpPpYVeBrf+lX3fl7zd/TUor7UT8C/qbKrBiyapEb8W4IV4zK/6aVcYgq7l8\\n7f5fXwIDAQABAkECYINWbxgK8uOdKV7y+PD/OapU4m2t9tU+fMjLvAG0MZHt8y8N\\nVwgmKSIKJhIJCJhi0yQ8OfktrXqR2WWPSB2KcQIhA4H1Vkwe1Yy+SxqYIV80kMIg\\nleWhKjT0n9ulhPWR/sUpAiEBgn5BMwTzTYFJ2XQvanpLxm5NYKjm3ZtZbbDq6KfV\\nSUcCIQGSBGHfcIqRGX0MagG+2wzYLLiPdwkrbj3Hm6IcQ4G5iQIgcUOay97Zho8r\\nG0UHWEb6ye4tUvRso+kQ7ip4zTHSOaUCIQCPYrDcX7TBHjL8ymTorezbRm4AcT5l\\nL2o97zb984pyGg==\\n-----END PRIVATE KEY-----\\n\";\r\nconst encryptAES = (text) => {\r\n  if (typeof text !== 'string' || text.length === 0) {\r\n    throw new Error('AES encryption failed: Input must be a non-empty string');\r\n  }\r\n  const cipher = forge.cipher.createCipher('AES-CBC', forge.util.hexToBytes(AES_KEY));\r\n  cipher.start({ iv: forge.util.hexToBytes(AES_IV) });\r\n  cipher.update(forge.util.createBuffer(text));\r\n  cipher.finish();\r\n  return cipher.output.toHex();\r\n};\r\n\r\nconst encryptRSA = (plainText) => {\r\n  if (typeof plainText !== 'string' || plainText.length === 0) {\r\n    throw new Error('RSA encryption failed: Input must be a non-empty string');\r\n  }\r\n  try {\r\n    const publicKey = forge.pki.publicKeyFromPem(RSA_PUBLIC_KEY);\r\n    const encrypted = publicKey.encrypt(plainText, 'RSA-OAEP');\r\n    return forge.util.encode64(encrypted);\r\n  } catch (error) {\r\n    console.error('RSA encryption failed:', error);\r\n    throw new Error(`RSA encryption failed: ${error.message}`);\r\n  }\r\n};\r\n\r\nconst decryptRSA = (encryptedText) => {\r\n  if (typeof encryptedText !== 'string' || encryptedText.length === 0) {\r\n    throw new Error('RSA decryption failed: Input must be a non-empty string');\r\n  }\r\n  try {\r\n    const privateKey = forge.pki.privateKeyFromPem(RSA_PRIVATE_KEY);\r\n    const decrypted = privateKey.decrypt(forge.util.decode64(encryptedText), 'RSA-OAEP');\r\n    return decrypted;\r\n  } catch (error) {\r\n    console.error('RSA decryption failed:', error);\r\n    throw new Error(`RSA decryption failed: ${error.message}`);\r\n  }\r\n}\r\nconst setEncrypTpin = (enData, rsaendata) => {\r\n  return axios.post(`${baseUrl}tpin/addTpin`, enData, {\r\n    headers: {\r\n      Authorization: `Bearer ${window.localStorage.getItem('userToken')}`,\r\n      rsaendata: rsaendata,\r\n    }\r\n  });\r\n};\r\n\r\nconst DeviceInfo = () => {\r\n  const [ipAddress, setIpAddress] = useState('');\r\n  const [deviceId, setDeviceId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [tpin, setTpin] = useState('');\r\n  const [confirmTpin, setConfirmTpin] = useState('');\r\n  const [expiryDate, setExpiryDate] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const deviceInfo = deviceDetect();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch IP Address\r\n        const ipResponse = await fetch('https://api.ipify.org?format=json');\r\n        const ipData = await ipResponse.json();\r\n        setIpAddress(ipData.ip);\r\n\r\n        // Fetch Device ID from FingerprintJS\r\n        const fp = await FingerprintJS.load();\r\n        const result = await fp.get();\r\n        setDeviceId(result.visitorId);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Failed to fetch device information');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const getDeviceType = () => {\r\n    if (isWindows) return 'Windows PC';\r\n    if (isMacOs) return 'MacBook or iMac';\r\n    if (isAndroid) return 'Android Device';\r\n    if (isIOS) return 'iOS Device';\r\n    if (isTablet) return 'Tablet';\r\n    if (isMobile) return 'Mobile Device';\r\n    if (isBrowser) return 'Desktop Browser';\r\n    return 'Unknown Device';\r\n  };\r\n\r\n  const getBrowserType = () => {\r\n    if (isChrome) return 'Chrome';\r\n    if (isFirefox) return 'Firefox';\r\n    if (isSafari) return 'Safari';\r\n    if (isOpera) return 'Opera';\r\n    if (isIE) return 'Internet Explorer';\r\n    if (isEdge) return 'Microsoft Edge';\r\n    return 'Unknown Browser';\r\n  };\r\n\r\n  const formatTpin = (input) => {\r\n    if (typeof input !== 'string' || input.length < 4) {\r\n      throw new Error('TPIN must be a string with at least 4 characters.');\r\n    }\r\n    const numericTpin = parseInt(input, 10);\r\n    if (isNaN(numericTpin)) {\r\n      throw new Error('TPIN must be a valid number.');\r\n    }\r\n    return `PP@${input.slice(0, 2)}PS${input.slice(2)}`;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      if (!tpin || tpin.length < 4) {\r\n        throw new Error('TPIN must be at least 4 digits long.');\r\n      }\r\n\r\n      if (tpin !== confirmTpin) {\r\n        throw new Error('TPIN and Confirm TPIN do not match.');\r\n      }\r\n\r\n      const formattedTpin = formatTpin(tpin);\r\n      \r\n      const bodyData = {\r\n        tpin: tpin,\r\n        cTpin: confirmTpin, // Including confirm TPIN in the encrypted body\r\n        userId: window.localStorage.getItem('userToken'),\r\n        deviceId: deviceId || 'Unknown',\r\n        ipAddress: ipAddress || 'Unknown',\r\n        deviceType: getDeviceType(),\r\n        device_info: JSON.stringify(deviceInfo),\r\n        long: '', // Add actual longitude if available\r\n        lat: '', // Add actual latitude if available\r\n        expiry_date: \"\",\r\n        expiry_status: true,\r\n        fingerprint: deviceId || 'Unknown' // Using deviceId as fingerprint\r\n      };\r\n\r\n      const encryptedBody = encryptAES(JSON.stringify(bodyData));\r\n      const rsaendata = encryptRSA(formattedTpin);\r\n      console.log('rsaendata Response:', rsaendata);\r\n\r\n      const response = await setEncrypTpin(\r\n        { enData: encryptedBody },\r\n        rsaendata\r\n      );\r\n\r\n      console.log('API Response:', response.data);\r\n      const decryptedTpin = decryptRSA(rsaendata);\r\n      console.log('Decrypted TPIN:', decryptedTpin);\r\n      // Handle successful submission (e.g., show success message, navigate to next page)\r\n    } catch (error) {\r\n      console.error('Error in handleSubmit:', error);\r\n      setError(error.message || 'Failed to set TPIN. Please try again.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading device information...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    \r\n\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"number\"\r\n        value={tpin}\r\n        onChange={(e) => setTpin(e.target.value)}\r\n        placeholder=\"Enter TPIN\"\r\n        maxLength={4}\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        value={confirmTpin}\r\n        onChange={(e) => setConfirmTpin(e.target.value)}\r\n        placeholder=\"Confirm TPIN\"\r\n        maxLength={4}\r\n      />\r\n      \r\n      <button type=\"submit\" disabled={isSubmitting}>\r\n        {isSubmitting ? 'Submitting...' : 'Submit'}\r\n      </button>\r\n    </form>\r\n    {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n    {/* <BrowserView>\r\n      <p>This content is visible only on browsers</p>\r\n    </BrowserView>\r\n    \r\n    <MobileView>\r\n      <p>This content is visible only on mobile devices</p>\r\n    </MobileView> */}\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default DeviceInfo;"],"names":["DeviceInfo","ipAddress","setIpAddress","useState","deviceId","setDeviceId","loading","setLoading","tpin","setTpin","confirmTpin","setConfirmTpin","expiryDate","setExpiryDate","isSubmitting","setIsSubmitting","error","setError","deviceInfo","deviceDetect","useNavigate","useEffect","async","ipResponse","fetch","ipData","json","ip","fp","FingerprintJS","result","get","visitorId","console","fetchData","_jsx","children","_jsxs","onSubmit","e","preventDefault","length","Error","formattedTpin","input","numericTpin","parseInt","isNaN","concat","slice","formatTpin","bodyData","cTpin","userId","window","localStorage","getItem","deviceType","isWindows","isMacOs","isAndroid","isIOS","isTablet","isMobile","isBrowser","device_info","JSON","stringify","long","lat","expiry_date","expiry_status","fingerprint","encryptedBody","text","cipher","forge","createCipher","hexToBytes","start","iv","update","createBuffer","finish","output","toHex","encryptAES","rsaendata","plainText","encrypted","publicKeyFromPem","encrypt","encode64","message","encryptRSA","log","response","setEncrypTpin","enData","axios","post","baseUrl","headers","Authorization","data","decryptedTpin","encryptedText","privateKeyFromPem","decrypt","decode64","decryptRSA","type","value","onChange","target","placeholder","maxLength","disabled","style","color"],"sourceRoot":""}